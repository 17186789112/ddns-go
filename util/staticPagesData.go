// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x51\x6f\x1b\xc7\x11\x7e\xd7\xaf\x98\x2e\xfc\x20\x01\x39\x9e\x44\x29\x44\x2a\xf3\x08\xd8\xa6\xdb\x08\x55\x9c\xd6\x8a\x8c\xbe\x09\x7b\x77\x43\xde\x5a\x7b\xbb\xe7\xdd\x3d\x52\x2c\x41\xc0\x0f\x4d\xd3\x16\x2e\xea\x02\x29\x60\xa4\x09\xdc\x02\x45\x51\xa4\x48\xdc\x47\x37\x68\x93\x3f\x23\x3a\xf6\x53\xff\x42\xb1\x77\xc7\xe3\x51\x3c\x59\x72\x24\x37\x89\x1e\x74\xbb\xb3\x33\xb3\x33\xdf\x37\x3b\xbc\xdb\x76\x64\x62\x0e\x9c\x8a\xbe\x47\x50\x90\xce\xca\x4a\x3b\x42\x1a\x76\x56\x00\xda\x31\x1a\x0a\x41\x44\x95\x46\xe3\x91\xd4\xf4\x9c\xb7\xc8\x7c\x21\x32\x26\x71\xf0\x5e\xca\x06\x1e\xf9\xb9\xb3\x7f\xcd\xb9\x21\xe3\x84\x1a\xe6\x73\x24\x10\x48\x61\x50\x18\x8f\xec\xdc\xf4\x30\xec\x63\xc5\x4e\xd0\x18\x3d\x32\x60\x38\x4c\xa4\x32\x15\xd5\x21\x0b\x4d\xe4\x85\x38\x60\x01\x3a\xd9\xe4\x0d\x60\x82\x19\x46\xb9\xa3\x03\xca\xd1\xdb\x58\x72\x43\x53\x13\x49\x55\x71\x72\x97\x15\x7b\x19\x66\x38\x76\xba\xdd\x5b\x7b\xce\x8f\xdf\x6d\xbb\xf9\xd4\x2e\xfc\xc0\x71\xe0\xba\x94\x46\x1b\x45\x13\xb8\xb1\xb7\x07\x8e\x93\x2d\x70\x26\x0e\x41\x21\xf7\x88\x36\x23\x8e\x3a\x42\x34\x04\x22\x85\x3d\x8f\xb8\xda\x50\xc3\x02\xd7\x9f\x19\x36\x62\x26\x1a\x81\xd6\xe4\xdc\xa6\x81\x8c\x63\x39\xb3\x69\xbb\x39\xca\x2b\x6d\x5f\x86\xa3\xcc\x87\x15\xa0\xb2\x43\x80\x76\xc8\x06\x10\x70\xaa\xb5\x47\x04\x1d\xf8\x54\x41\xfe\x70\x42\xaa\x0e\xc1\xef\xe7\x4f\x1d\xd1\x50\x0e\x1d\x1d\x93\xdc\x6c\xd1\xd0\x62\x42\x99\x40\x05\xa1\xd3\xe3\x78\x04\x77\x53\x6d\x58\x6f\xe4\x14\x60\x39\x3e\x9a\x21\x66\xa4\x43\xf1\xd7\xa6\xb3\xa0\xc9\xe2\xf6\x8e\xaf\xa8\x08\x67\x8e\x28\x67\x7d\xe1\x30\x83\xb1\x76\x02\x14\x06\x55\xc5\x07\x40\x5b\x0f\xfa\x70\x14\x73\xa1\x3d\x62\xab\x64\xdb\x75\x87\xc3\x61\x63\xb8\xd9\x90\xaa\xef\x36\xd7\xd7\xd7\x5d\x3d\xe8\x13\xc8\x09\x27\xcd\x75\x02\x11\xb2\x7e\x64\xf2\x71\x8f\x71\xee\x11\x21\x05\x12\xd0\x46\xc9\x43\xf4\x48\x90\x2a\x85\xc2\xdc\x90\x5c\x2a\x52\xd9\x0a\x0a\x0d\x87\x33\x81\x01\x4d\x3c\xa2\x64\x2a\x42\x52\x15\xdf\x95\x4c\x9c\x94\xcf\xb6\x26\x40\x15\xa3\x4e\xc4\xc2\x10\x85\x47\x8c\x4a\xb1\xcc\x3c\x56\x4e\x73\x71\x2f\x5b\xb4\xd7\xe5\x91\x47\xd6\x61\x1d\x9a\x5b\xd0\xdc\x22\xd0\x93\x41\xaa\xa9\xcf\xd1\x23\x3d\xca\x35\x2e\x20\x01\xd0\x4e\xa8\x89\x20\xf4\xc8\x3b\xcd\x4d\xd8\xf8\x21\x6d\x42\x13\xac\xf5\x86\xd3\x84\xe6\xdb\x9b\xd5\xb9\xd3\xbc\xf3\xd6\x7c\x0e\x4d\xa7\x19\x6d\xf1\xa6\xb3\x19\xb5\x78\x13\x36\xa3\xad\xea\x1a\x34\x7f\x41\xc0\x3d\xb1\x55\xc0\x54\xc0\x11\x82\x23\x8f\x6c\x34\x09\x04\x23\x8f\x6c\x6c\x12\x50\x1e\xd9\xb2\xca\x6d\x8b\xfa\x22\x4f\x46\x49\xd1\x9f\x1f\x92\x62\x3e\x2f\x07\x97\x96\x85\xe5\x86\x6c\x50\x14\xe7\x6c\x98\x17\x71\x5e\xb3\xd9\xb9\xa4\x4c\x80\x92\x16\x0a\x3b\xb4\x60\x8f\xf2\x89\xea\x33\xe1\x18\x99\x6c\xc3\xe6\x7a\x72\x44\xe6\x45\x5e\x5f\xb7\xdc\x89\x43\xa7\x05\xb2\xd7\xd3\x68\xec\x78\xb3\x5a\xa3\x3d\xa9\x62\xa0\x81\x61\x52\xd8\xd3\x45\x07\x48\x20\x46\x13\xc9\xd0\x23\x89\xd4\xc6\x36\xb1\x4a\x92\x7e\x6a\x8c\x14\x60\x46\x09\x7a\x44\xa7\x7e\xcc\x4c\x49\xb1\x6f\x04\xf8\x46\x38\x89\x62\x31\x55\xa3\x93\x11\xfb\xd2\x18\x19\x6f\x43\x73\x3d\x39\xba\x4a\x3a\x7b\x74\x80\x6d\x37\xf7\xb7\xb8\x47\x25\x7a\xdb\xd4\x38\x9a\x93\x65\x10\xbd\x79\x42\xe1\xe0\xc0\x82\x47\x3a\xdd\x5b\x7b\xc7\x5f\xfe\x69\xfa\xc5\x87\xd3\x3f\xfe\xaa\xed\x46\x6f\x9e\xb0\x5b\xf6\x7c\x70\x60\x5b\xc6\x09\xff\x8b\x9a\x16\x21\xa7\xaf\x64\x9a\x2c\xa9\xd5\x28\x06\x11\x06\x87\x30\x1f\x3a\x4c\xd8\x63\x53\x63\x0a\xd0\x66\x22\x49\xcd\xb2\xb9\x93\xc9\x49\x81\xb2\xa2\x21\x93\xa4\x68\xd1\x5d\xa1\x6f\xd1\x18\x09\xb0\xd0\x23\x94\xb3\x50\x68\x02\x03\xca\x53\x9c\x4f\xa5\x08\x38\x0b\x0e\x67\x82\x1b\xd6\x25\x86\x3f\x4a\xc5\xea\x1a\x81\xf1\x98\xf5\x00\xef\xc1\x95\x46\xf7\xd6\x5e\xc3\xfa\x82\x99\xe1\x64\x12\xe4\xaa\xe3\x31\x8a\x70\x32\xa9\x0d\x99\x53\x1f\x79\x4d\xc8\x99\xdc\x1e\x60\x55\x06\x52\x67\x0f\x70\x2d\x5b\x5c\x7d\xf1\xe8\xab\x17\x1f\x3c\x38\xfe\xe2\x0f\x6b\x75\xbb\xb8\x99\xbb\x1a\xb8\xdd\x4a\x99\x7f\x47\x58\x08\x85\x4e\x64\x58\xb2\x30\x9b\x96\x2c\xe4\x82\xb3\x59\x28\x0c\x2f\x8d\x85\xc2\x5f\x3d\x0b\xdd\x6c\x71\xf5\xf9\xfb\x5f\x3e\xff\xfc\xc9\x65\xb1\x60\x5f\x06\xbe\x55\x2a\x02\x2e\xd3\xb0\xc7\xa9\xc2\x92\x8e\xaa\xa8\xa4\x64\x2e\x5c\xa0\xe5\x1b\x43\x5d\xd9\xa4\x1e\xee\x1b\xa5\xc2\xab\xe3\x5c\xbc\x51\x9d\x49\xc0\xf9\x7b\x56\x9e\x52\x16\x79\x57\xe8\x9d\x6e\x59\xc7\x3b\xe1\x6e\x96\x55\x67\xa7\x7b\x7a\x50\x35\x1c\x49\x61\x94\xe4\x15\x4a\x66\x3e\x8b\x61\xc1\xc5\x78\x9c\x95\xfb\x4e\x77\x32\x59\xee\xb8\x4b\x29\x5d\x52\x7a\x7b\x18\x28\x34\xa4\xcc\xb0\x98\x77\xf2\xe7\xc5\xd2\x2c\x7c\xcd\x52\x9d\x4d\x17\xd3\xcd\xa5\xa7\xa7\xbc\xf2\x52\x18\x96\x95\x2e\xf2\xfb\xb8\xf3\xd3\x3b\x5b\x17\xf9\x5d\x84\x57\xe5\xa7\x72\xf0\xeb\xa8\xca\x41\xce\x8f\x75\xa6\xe4\xcb\x23\x72\xfa\xf9\xb7\x38\xb3\x64\xb0\x75\x80\x82\x66\x5f\x46\x39\x13\x3b\xc9\x60\xeb\x66\x21\x99\x77\x56\x2b\x6d\xe4\x62\xb0\xaf\xa2\x67\x37\xd6\x73\x9d\xf5\xea\xfe\x9d\x67\x8f\x9e\x4c\x1f\xfe\x6d\xfa\xf0\xc9\xd7\x1f\xfe\xfd\x94\x52\xaa\x63\xf9\x1b\x56\x73\xb6\x75\xaa\x38\xe9\xec\xdf\xde\x3d\xab\x72\x73\x50\xad\xf6\xcb\x8a\xd8\x82\xb4\x6f\x75\x4a\x68\x33\x8b\xec\x3d\x3e\x44\x1d\x28\xe6\x63\xe8\x8f\xe6\x6b\x07\x11\xf2\xa4\x5a\xe2\x19\xcc\xfb\xb7\x77\x6b\x0a\xdc\xbe\x14\xc7\x94\xf3\x05\xe7\x85\x83\x6a\x4c\x06\x8f\x0c\xd8\x7f\x4e\x9c\x1a\x0c\x49\x67\xfa\xfb\x27\xcf\x3f\xf8\x74\xfa\xf9\x47\xc7\xff\xfa\xcd\xfe\xed\xdd\xff\xfe\xfb\xc1\xb3\xcf\xfe\xba\x7f\x7b\xf7\xc5\xc7\xf7\xa7\x0f\xde\x9f\x3e\xfc\xc7\xf1\x7f\xfe\xfc\xf5\x47\xbf\xb4\xd5\x3c\xfd\xf8\x9f\xd3\x4f\xee\xb7\xdd\x6c\xa3\xd7\x8d\x7d\x28\xed\xab\xb8\x26\x9d\x6e\x3e\x38\x9d\x03\x9b\x0d\x55\x48\xeb\xb1\x2f\xf1\x98\x39\xac\xb0\xd1\x9d\x89\x94\x1c\x6a\x8f\x6c\x9e\x4a\x46\x61\x9b\xe3\xd9\x59\x19\x8f\x1d\x50\x54\xf4\x11\xae\xb0\x37\xe0\xca\x00\xb6\x3d\xc8\xc9\x29\x3c\x4e\x26\x2b\xe3\xf1\x95\x41\xf6\x70\x00\x45\x08\xce\x64\x52\xf3\x9b\x33\x0b\xfd\x6c\x36\x17\x22\x78\x39\xa3\xc7\x4f\xef\x3f\xff\xcb\x83\xe3\xa7\xf7\x8f\x9f\x7e\x3a\x7d\xfc\x78\xfa\xf0\x77\xaf\x40\xd9\xeb\x6f\x8a\xad\xef\x7f\x53\x6c\x2d\x37\xc5\x56\x6d\x53\x6c\xbd\x9e\xa6\xd8\xfa\xf6\x9a\x62\xeb\xd2\x9a\x62\x89\x65\xa6\x32\x07\x72\xff\xd4\xa6\xd8\x5a\x6e\x8a\x91\x31\x89\xde\x76\x5d\x9a\x30\xc7\x6a\x34\x58\xd2\xd0\xbe\xcb\x6a\x33\x59\x38\x52\xad\xcb\x6f\x90\xad\xff\x63\x83\x6c\x5d\x76\x83\x6c\xd5\x34\xc8\xd6\x39\x1b\x64\xeb\xbc\x0d\xb2\xf5\xba\x1a\x64\xeb\x3b\xd5\x20\x5f\xe5\xe6\xe6\xb4\xcb\x99\xb6\x6b\x83\x7f\xf9\x2d\x96\xcd\x38\x33\x69\x5b\x3e\x12\x93\x2b\xf4\x52\x91\xdd\x31\x41\x1f\xcd\xcf\x52\x54\xa3\x3b\x96\x34\x9f\xe3\xea\xda\xb8\x70\x37\xa0\x0a\xee\xd9\x25\xf0\x60\xc8\x44\x28\x87\x0d\x2e\x03\x6a\xad\x1a\x1a\xa9\x0a\xa2\x86\x4e\x7d\x6d\x14\x13\xfd\xd5\x8d\xb5\xab\x85\x19\xeb\xc1\x6a\x61\xe6\x79\x40\x34\x1d\xe0\xbb\x87\x5e\x76\xf7\xb8\x06\xe3\x32\xf4\x93\x1e\x23\x85\x3d\xf0\x80\xb8\xf3\x4b\x49\xca\x51\x99\x55\x72\xfc\xd5\x27\xd3\xcf\x1e\x3d\xfb\xf5\xc3\xe9\x6f\x1f\x93\xd9\x77\x71\x5e\x07\xf9\xff\xe5\x14\x56\x16\x73\x5c\xbe\x77\x29\x03\x09\x65\x90\xc6\x28\x4c\xa3\x8f\xe6\x26\x47\x3b\xbc\x3e\xda\x09\x57\xab\x5f\x5f\x6b\x0d\x26\x04\xaa\xb7\xdf\x7b\x67\xd7\x46\x78\x2d\x08\x50\xeb\x9f\xe0\x08\x76\xba\xe4\x5c\x6e\x8a\xef\x90\x53\xfd\x14\xeb\x45\x4a\x8b\xb1\x2f\xdf\x56\x5c\x24\xf6\x8b\x45\xfc\x9e\x3c\x44\x51\x1f\x66\xfd\x17\x7c\x19\x6a\xd5\xc6\xd6\x55\x98\xdf\x12\x80\x07\xe3\xf1\xfc\xce\x65\x52\x68\xe8\x21\x33\x41\xb4\x5a\x28\x95\x05\x19\x50\x3d\xbf\x1c\xdb\xae\xd4\xd2\x32\xbf\xe5\x92\xaf\x90\x1e\x5e\x5d\x28\x9a\x99\xa3\xe2\x3e\xa6\xea\x68\x19\xec\xf3\x38\xaa\xdc\x36\x54\x9d\xd5\x43\xf2\x32\x87\x93\xec\xc0\xce\x8e\xe9\x4a\xdb\x8d\x4c\xcc\x3b\xff\x0b\x00\x00\xff\xff\x23\xd6\x55\x5a\xc5\x1a\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 6853, mode: os.FileMode(420), modTime: time.Unix(1598861889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
