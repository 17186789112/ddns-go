// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xe1\x73\x1b\xb5\xb6\xff\x9e\xbf\x42\x88\xcc\xd8\x7e\x93\xdd\x4d\x9c\xd4\x94\xe0\x35\x03\x35\xef\x35\xf3\xda\xd2\x69\x5a\x86\x6f\x19\x79\x57\xb6\x95\xec\x4a\x5b\x49\xeb\xc4\xf5\x78\xa6\xf0\x5e\x79\xc0\xb4\x6f\xda\xf7\x80\xcb\x05\x4a\x29\x03\x4c\xe7\xce\x25\xe5\xd3\xbd\x9d\x96\x92\x3f\x86\x38\x49\x3f\xdd\x7f\xe1\x8e\xb4\xde\xf5\xda\x5e\x37\x86\xa6\xa5\xb7\xf9\x10\xef\x4a\x47\x47\x47\xe7\xf7\xd3\x39\xd2\x4a\xe5\xa6\xf4\x3d\xe0\x21\xda\xb0\xe1\xa5\x26\xac\xcc\xcc\x94\x9b\x18\xb9\x95\x19\x00\xca\x3e\x96\x08\x38\x4d\xc4\x05\x96\x36\x0c\x65\xdd\x38\x0e\x07\x15\x4d\x29\x03\x03\x5f\x0c\x49\xcb\x86\xef\x1a\x17\xde\x30\x4e\x30\x3f\x40\x92\xd4\x3c\x0c\x81\xc3\xa8\xc4\x54\xda\x70\xe5\x2d\x1b\xbb\x0d\x9c\x6a\x47\x91\x8f\x6d\xd8\x22\x78\x33\x60\x5c\xa6\x44\x37\x89\x2b\x9b\xb6\x8b\x5b\xc4\xc1\x86\x7e\x99\x03\x84\x12\x49\x90\x67\x08\x07\x79\xd8\x5e\x18\x53\x83\x42\xd9\x64\x3c\xa5\x64\x9d\xf4\xfb\x92\x44\x7a\xb8\x52\xad\x9e\x59\x35\xfe\xe3\xed\xb2\x15\xbd\xaa\x8a\x97\x0c\x03\xbc\xc9\x98\x14\x92\xa3\x00\x9c\x58\x5d\x05\x86\xa1\x2b\x3c\x42\x37\x00\xc7\x9e\x0d\x85\x6c\x7b\x58\x34\x31\x96\x10\x34\x39\xae\xdb\xd0\x12\x12\x49\xe2\x58\xb5\xb8\xa1\xe9\x13\x6a\x3a\x42\xc0\xa9\x9b\x3a\xcc\xf7\x59\xaa\x8d\x70\x38\x09\x24\x10\xdc\x19\xc8\xac\x5f\x0c\x31\x6f\x1b\x8b\xe6\x31\x73\x41\xf7\xb0\x2e\x60\xa5\x6c\x45\xa2\x95\x99\xb2\x15\x61\x33\x53\xae\x31\xb7\xad\xb5\xa8\x02\xcc\xd5\x23\x00\x65\x97\xb4\x80\xe3\x21\x21\x6c\x48\x51\xab\x86\x38\x88\x7e\x0c\x17\xf1\x0d\x50\x6b\x44\xbf\xa2\x89\x5c\xb6\x69\x08\x1f\x46\xcd\x86\x1b\x2a\x4f\x22\x42\x31\x07\xae\x51\xf7\xf0\x16\x58\x0f\x85\x24\xf5\xb6\xd1\x77\xb1\x51\xc3\x72\x13\x63\x9a\x34\x06\xa0\x8c\xe2\xa1\xc2\xe1\xee\x8d\x1a\x47\xd4\x8d\x15\x21\x8f\x34\xa8\x41\x24\xf6\x85\xe1\x60\x2a\x31\x4f\xe9\x50\x0e\x69\x35\xc0\x96\xef\x51\x61\x43\xc5\xad\x65\xcb\xda\xdc\xdc\x34\x37\x17\x4d\xc6\x1b\x56\x71\x7e\x7e\xde\x12\xad\x06\x04\x11\x4d\x60\x71\x1e\x82\x26\x26\x8d\xa6\x8c\x9e\xeb\xc4\xf3\x6c\x48\x19\xc5\x10\x08\xc9\xd9\x06\xb6\xa1\x13\x72\x8e\xa9\x3c\xc1\x3c\xc6\x61\xaa\x2b\xd0\x97\x30\x3c\x42\xb1\x83\x02\x1b\x72\x16\x52\x17\xa6\x8b\xd7\x19\xa1\xa3\xe5\x71\xd7\x10\x20\x4e\x90\xd1\x24\xae\x8b\xa9\x0d\x25\x0f\x71\x32\x72\x9f\x1b\xc5\xe1\xbe\x14\xd5\xdf\x64\x5b\x36\x9c\x07\xf3\xa0\xb8\x04\x8a\x4b\x10\xd4\x99\x13\x0a\x54\xf3\xb0\x0d\xeb\xc8\x13\x78\xc8\x13\x00\x94\x03\x24\x9b\xc0\xb5\xe1\xe9\xe2\x22\x58\x78\x15\x15\x41\x11\xa8\xd6\x0b\x46\x11\x14\x4f\x2e\xa6\xdf\x8d\xe2\x3b\xc7\x07\xef\xa0\x68\x14\x9b\x4b\x5e\xd1\x58\x6c\x96\xbc\x22\x58\x6c\x2e\xa5\xeb\x40\xf1\x12\x04\xd6\x48\x57\x0e\xe1\x8e\x87\x81\xb3\x65\xc3\x85\x22\x04\x4e\xdb\x86\x0b\x8b\x10\x70\x1b\x2e\x29\xe1\xb2\xf2\xfa\x30\x4e\x92\x33\xda\x18\x4c\xad\xfe\xfb\x80\x0e\x16\x4a\x88\x65\xb9\xa4\xd5\x27\x67\xfc\x18\x91\x38\xe2\xac\x9e\xcd\x88\x50\xc0\x99\x72\x85\x7a\x54\xce\x6e\x47\x2f\xbc\x41\xa8\x21\x59\xb0\x0c\x16\x8e\x05\x5b\x70\x9c\xe4\x9c\x6d\x4e\xe0\xb0\x67\xf8\xae\x51\x02\xac\x5e\x17\x58\xaa\xe7\xc5\x34\x5f\xeb\x8c\xfb\x95\x99\xf4\x98\x6a\xa1\x94\x8c\xc6\xed\x6b\x92\x82\x9a\xa4\x46\xc0\x89\x8f\x78\x1b\x88\xb0\xe6\x13\xb9\x56\x93\x63\xd6\xd5\x98\x94\xcc\x8f\x0c\x7c\x0d\x56\x56\x51\x0b\x97\xad\x48\xd9\x70\x07\x29\xeb\x90\x87\xb9\x04\xfa\xbf\x21\x42\xc7\xc1\x42\x24\x6a\x5d\x22\x02\x0f\xb5\x97\x81\x22\xf2\x6b\xa3\xac\x88\x3c\x0d\x88\x6b\x43\x8e\x45\xe8\xc9\xd3\xa2\x01\x2b\xbb\x3b\x37\x7b\x3f\x7e\xbe\xf7\xe1\xf5\xde\xc7\xb7\xc6\xd1\x48\x3c\x3f\xc1\x1a\x15\x84\x3d\x2c\x47\xbb\x6a\x1e\x1b\x11\x58\x5b\x53\xb0\xc1\x4a\xf5\xcc\xea\xde\x57\xd7\x7a\x1f\xdf\xee\x7d\xfa\x41\xd9\x6a\x1e\x1b\x69\x37\xae\x79\x6d\x4d\x05\x2b\x38\x64\xc0\xa8\xa8\x02\xc4\x68\x70\x16\x06\x20\x8d\x69\x4a\xd8\x43\x35\xec\xa5\xf1\x15\xbe\x51\x04\xea\x41\xb7\xd5\xd5\x2a\x54\xea\x87\x8c\xf6\x23\xec\x10\xbe\xb1\x30\x9f\xd1\x4f\x86\x59\x4e\x13\x3b\x1b\x60\xf0\x68\x10\xaa\xe2\xc3\x58\xdf\x19\xba\x00\x28\x13\x1a\x84\x72\x5c\x9f\xa1\xcb\x21\x90\xed\x00\xdb\x90\x23\x97\x30\xd8\x4f\x69\x55\x2a\xce\x20\x1f\x43\x0d\x33\xf2\x88\x4b\x05\x04\x2d\xe4\x85\x78\xf0\xca\xa8\xe3\x11\x67\x23\x2e\x38\xa1\x54\x62\xf7\xdf\x43\x9a\x2f\x40\xd0\xe9\x90\x3a\xc0\x17\xc1\xac\x59\x3d\xb3\x6a\x2a\x5d\x20\x6e\xd8\xed\x3a\x91\x68\xa7\x83\xa9\xdb\xed\x4e\x30\x7a\xc8\xd9\x29\xa3\xa3\x91\x2a\x5f\x24\xa6\x64\x6b\x00\xe0\x0d\x5d\x9d\x7f\xf4\xf9\xce\xa3\xff\xb9\xba\x7b\xff\x46\x21\xbb\xa7\x49\x78\x0d\x85\x8e\xe7\x19\x20\x97\x8a\x80\xb9\x09\x40\xf1\x6b\x02\x50\x54\x70\x38\x40\xfd\x86\x47\x08\x50\x5f\xe3\x24\x80\xaa\xba\x3a\x7f\x70\xe5\x97\x83\xed\xbb\x2f\x30\x40\x8e\xc7\x42\xb7\xee\x21\x8e\x13\x90\xd2\x45\x09\x50\x83\xc2\xc3\xc1\x4a\x29\x38\x42\xc0\x52\x5a\x27\x81\x76\x22\x11\x79\x41\xd1\x6a\x86\x68\x13\x13\xed\x89\x04\xae\xa1\xb2\x04\xaf\x54\xe9\xe1\x80\xa5\x55\x1c\x21\x62\x69\xb5\x93\x20\xeb\x5d\xfb\xdf\xdd\x7b\xf7\x77\xef\xdf\x38\x3a\xc4\x84\x8f\x3c\x2f\x8e\x3e\x6b\x4d\xec\x05\x70\xc8\x50\x89\xb7\x24\x50\xff\x0c\x3f\x94\xd8\xd5\x3b\x08\xd5\x24\x23\x2d\x66\xf5\x31\xbe\x5e\x00\xbf\x33\x5d\x6b\x27\x55\xa9\x58\xa9\x26\xc1\x72\xc5\x3d\x15\x39\xf0\xb0\x54\xbe\x52\x3d\x8a\x64\x9e\x41\x47\x46\x25\x67\x5e\x8a\x7d\xb1\x75\xfd\xc7\x3e\xeb\x3a\x1d\xcd\x9f\x95\x6a\xb7\x9b\x35\xc0\x67\xe3\xb8\x55\xec\x70\xb5\x93\xec\x3b\x2f\x7a\x9d\xd2\x81\x91\xf0\xb3\x72\x62\xda\xd2\xd4\xeb\xb0\x33\xa3\xd2\x27\x73\xe8\x98\xe0\xd1\x2e\x6f\x57\xce\xbe\xb3\xf4\xcc\x97\xb5\x1a\x6e\x12\xb4\x96\xd6\x30\x45\xd1\xf7\x93\x61\x70\x61\x65\xef\xf3\xbb\xbd\xeb\x3f\xf4\xae\xdf\xdd\xff\xe4\xce\xd1\x61\x1a\x85\x63\x1d\xd8\x6a\x6c\x0b\x66\xc6\x6d\x15\xfc\x33\x37\x65\x7a\xcb\xa3\x01\x1f\x32\x3d\xa2\xc4\x4a\xd0\x5a\x7a\xab\x5f\x32\x88\xc8\xaa\xd4\x8c\x8a\x81\xda\x35\x1f\x1e\x8b\x9f\xc5\x44\xd3\xe6\x87\x7c\x8a\x39\xb5\x77\xeb\xfb\x83\xbb\xdf\x5e\x38\x77\xea\xa8\x21\x48\xf7\x9e\x35\xc3\x94\xe3\x2e\x28\x99\xc4\xdd\xba\x85\xfe\x0c\xe1\x62\xe1\x70\x52\xc3\x6e\xad\x3d\xa8\xeb\xa7\x85\xc1\xfc\xd3\xae\xbf\x70\xee\x54\xe6\xec\x1b\x4a\x2a\x23\x2a\x1e\x9b\x59\xf6\x7e\xfc\xee\xc2\xb9\x53\x8f\xbe\xba\x7c\xb0\xf3\x49\xef\xcb\xaf\x77\x1f\x7e\xb3\xff\xc5\x7f\xf7\xae\xfc\x75\xff\xe1\x0d\x35\x93\x7a\x5f\xfd\xd4\xbb\x79\xf9\xd7\xcb\xef\xf7\x7e\x78\xff\x1f\x3f\x7f\xd1\x94\x32\x10\xcb\x96\x85\x02\x62\xa8\x5e\x4c\x12\x98\xa2\x66\x91\xe0\xd7\xcb\xef\xc5\x75\x7e\x9b\x04\x26\x09\x48\x60\x52\x2c\x53\xe5\xae\x4b\x85\xc9\x38\x6a\x9b\x0e\xf3\x2d\x4d\x1b\x12\xfc\xa1\x89\x4d\xfb\xc9\x65\x3e\x22\x6a\x4b\x76\x18\x75\xaa\x91\xe0\x51\x10\x47\x01\x80\x38\x46\xd9\x84\x49\x20\x4c\x4c\x1b\x50\xa8\x1a\x17\x71\xb6\x29\x6c\xb8\x38\x91\x41\xfd\xb6\x11\x05\x2a\x33\x9d\x8e\x01\x38\xa2\x0d\x0c\x66\xc9\x1c\x98\x6d\x81\x65\x1b\x44\x8c\xea\x6b\xec\x76\x67\x3a\x9d\xd9\x96\xfe\x31\x00\xa6\x2e\x30\xba\xdd\xcc\x45\x4d\x6c\xfc\x34\x24\x1c\xb2\xe2\xf1\x44\xdc\xbd\x77\xf9\xe0\xf6\xd5\xdd\x7b\x97\x77\xef\xfd\xa5\x77\xeb\x56\xef\xfa\xb5\x27\xe7\xc6\xd3\x4f\x35\xa5\xdf\x96\x6a\x86\x4d\x3e\x42\x1e\x97\xfe\x75\x13\x4f\x69\x3c\xf1\x94\x32\x13\x4f\xe9\xb9\x4c\x3c\xa5\xe7\x36\xf1\x24\xfe\xd5\x22\x03\xe7\x5e\x98\x98\x78\x4a\xe3\x89\x67\x24\xe2\x97\x92\x88\x3f\x45\x12\x2a\x1d\x4d\x12\x2a\x3d\x3e\x09\x95\xb2\x92\x50\xab\x64\xea\x3c\xe4\x21\x6b\x5d\x30\x9a\xaa\x11\x01\xc6\xae\x49\x71\x58\x32\xb1\x1b\x9a\x0e\xb5\x1a\x58\xae\x9c\x35\x83\xe6\x1f\x9e\x8c\x4a\xcf\x6f\x32\x2a\x65\x24\xa3\xd2\x94\xc9\xa8\x34\x6d\x32\x2a\x3d\xcd\x64\x54\x7a\xc1\x93\x51\xef\xca\xdf\x7a\xdb\xff\xf5\xe8\xca\xb5\xfd\x87\xdb\xcf\x43\x52\xba\x20\x30\xa7\xfa\xb3\xd0\x61\x5c\xde\xff\xf3\x83\xde\xc3\x4f\xf7\x3f\xb9\xb3\xf7\xe1\xdf\xb5\xa7\x9f\xc1\x86\x77\x60\x9d\xa2\xc7\xe0\x6d\xb0\xdc\x8e\xcb\xba\xdd\x2c\x5a\xc7\xb5\x31\xa5\x33\x6c\x18\xb0\x6f\x58\xf8\x30\xe6\xdd\xdf\xdd\xb9\xb9\xf7\xf1\x77\x51\x10\xdc\xdd\xb9\xbd\xf7\xde\xdd\xde\xf6\x47\xbd\x2b\x77\xe6\x40\xef\xc1\xfd\x83\xed\xed\x83\x5f\xfe\xbf\x77\xe5\xfb\x3f\x34\x58\x9d\x45\x42\x6c\x32\xee\x4e\x0b\x6e\xef\xee\x07\xfb\xdf\xbc\xf7\x94\x91\x8d\xf2\x61\x90\x98\x16\x21\x3d\x30\x55\x41\x31\x78\x1b\x20\x1d\x97\x65\x23\x1d\xeb\x9b\x0a\xe9\x61\xe1\xe7\x06\xe9\x69\x42\xcf\xd3\x3d\x40\x2d\x5b\xd1\x91\x6d\x86\x3d\x19\xe7\xbe\x43\x67\xbd\xc1\xc0\x8d\x54\x1a\x9b\xfa\xc6\x80\xe1\xa9\xff\x91\x3b\x6b\x1c\xa3\x8d\xec\x43\x67\x6d\x93\x6e\x26\xc8\x25\xbc\x0c\x16\x16\x93\x85\xa7\xc7\x1a\xfa\x66\x46\xf0\xf8\x93\x6e\x95\x31\xf4\x30\xca\xf1\x15\x0e\x25\x30\x9b\xaf\x87\xd4\x91\x84\xd1\x7c\xa1\xd3\x6f\x3f\x9b\x87\x66\xca\x4b\x05\x93\xd1\x7c\x4e\x7f\xea\xce\xcd\x25\xd2\xb8\x00\x3a\xc9\xc8\xb0\x19\x70\xdc\xc2\x54\x56\x71\x1d\x85\x9e\xcc\x17\x5e\x4b\xea\x66\xf3\x39\x15\x9d\x73\x05\x13\x51\xe2\x23\x89\xf3\x1d\x20\x1c\xce\x3c\xef\xbc\x1a\xd9\x3c\xe8\xce\x81\xc5\xf9\xf9\x74\x0b\x13\xad\xa3\xad\x7c\x27\x85\xa9\x8f\x65\x93\xb9\xcb\x00\x9e\x7d\x7b\xf5\x3c\x9c\x4b\xd5\x84\xdc\x5b\x06\xd0\x12\xa8\x85\x87\xca\x5d\x24\xd1\xb2\xea\x5c\xa1\x95\x2b\x98\x02\x73\x82\x3c\x72\x09\xe7\x0b\x69\xb1\xfe\xa1\xf7\x32\x88\x07\x06\xf2\xd1\x71\x76\x7a\x78\xfd\x61\x98\xfa\x9c\x3c\x57\x30\x1d\x21\xf2\xf1\xf1\x38\x9c\x03\xb0\xe6\x31\x67\x03\xa6\x46\xa0\xfe\x48\x3d\x56\x05\x5e\xb2\x6d\x00\xd9\x06\x1c\xd5\x39\xac\x15\xb9\xee\x09\x45\x8f\x7c\x74\x2a\x6f\xb8\x6a\x5d\xc1\xe1\xe8\x61\xd8\x6c\x3e\xf7\x72\x72\xe2\x9e\x2b\x98\x4d\xe9\x7b\xb1\xcd\x43\xa2\x5d\x80\x3d\x81\xc7\xba\xb4\x2c\xc0\x36\x46\xca\x04\x96\xe7\x89\x8f\x59\x28\x33\xe8\x30\x9d\x0f\xf4\x6d\x97\x11\x17\x80\x3e\xb6\xf3\x23\x86\xcd\xa4\x05\x52\x2f\x98\x73\xc6\x07\x50\xe4\xd7\x2f\xbe\x7b\xf2\xdc\xa8\xd3\xb4\x01\x51\x95\x29\x24\x92\xa1\x38\x8f\xb7\xe4\x50\xcf\x83\x0e\xba\x71\xcf\xdd\x42\x34\x83\xe3\xdf\x16\xe2\xa0\x86\xeb\x8c\x63\xfd\xa9\xdd\x86\x30\x2a\x4f\x68\x30\x7e\x9a\x9d\xd8\xe1\x32\x27\xf4\x31\x95\x66\x03\xcb\xb7\x3c\xac\x1e\xdf\x6c\xaf\xb8\xf9\xfe\x57\xfb\x82\xe9\x12\x7d\x9f\xc6\xb5\x81\xbe\x50\xd3\x6f\xa6\x08\x91\xea\x72\xe0\x93\x43\xf5\x45\x01\x3e\x6d\xef\xcc\x61\xa6\xa4\x8e\x37\x0a\x26\xa1\x14\xf3\x93\xe7\x4f\x9f\x02\x36\x80\x6f\x68\xc2\xff\x27\x6e\x83\x95\x2a\x9c\x42\x4d\xfa\x43\xff\x44\x55\xfd\x6f\xec\x53\xa8\x8b\xf2\xc9\x88\xa2\x32\x02\x12\xf1\x06\x96\x76\x6e\xad\xe6\x21\xba\x91\x8b\x6e\x71\xe5\xe2\xad\x0e\x47\xbe\xe9\x30\x2a\x98\x87\x4d\xe4\x91\x76\x48\xf5\xa7\x37\x1f\x51\xd4\xc0\x16\xda\x78\x5d\x04\xbe\x7d\x6c\xe1\x95\x92\xb9\x50\x3c\xbe\x70\x7c\xfe\xd5\x45\x93\xa2\x96\xc1\x55\x6c\x35\x5d\xb4\x61\x2e\x1d\x3f\xfe\xca\x42\xc9\x9d\xf7\x4f\xa2\xd3\x8d\x46\xae\xd2\xfb\xf0\xcb\xde\x83\xfb\x20\x19\x41\xd9\x42\x95\xc8\xfc\xee\x08\x11\xc6\x4f\xcd\x5f\x10\x22\x3c\x31\xfc\xe7\xd9\x06\xa6\x4f\x0f\xf3\x18\xef\x08\x00\xb5\xbd\x45\x8e\xc3\x42\x2a\x2d\xa9\x3a\x8e\x31\xec\xdd\xfd\xe0\xd1\xff\x7d\x3f\x19\xbf\xec\xc3\xf4\xc3\x31\x9c\xec\xb8\x78\xc8\x29\x18\x80\x3d\x25\x78\xbf\x9d\x39\x92\x4f\xdf\xaa\xcf\x0f\xf8\x7c\x03\xeb\x22\xd1\x34\x07\xb0\xe8\x99\x1c\x70\x56\x27\x1e\xd6\x5f\x42\x34\xbc\x22\xc6\x77\xf7\xc1\x77\xfb\x1f\x5d\x35\x2a\xfb\x3f\x7f\x76\xf0\xcb\x8d\xde\xd5\xfb\xbd\x5b\xb7\x40\xf5\xcc\x6a\x7e\xf7\xe1\x8e\xda\x69\xdd\xb9\xbd\x77\x73\xa7\x30\x19\xff\x09\x87\xf3\x2f\xc8\x24\x8e\x02\x18\xd0\xe1\xdc\x7d\x42\xd8\xa3\x2a\x30\x50\xf9\xf4\xe7\x76\x0a\x1c\x4d\x03\x82\x7c\xeb\x75\x8f\xe9\x1b\xd6\x97\x9a\x86\x43\x5f\xb6\x7c\x42\xb1\x9a\xf9\x51\x9c\xce\x55\xf6\x3e\xfb\xa9\xf7\xed\xd7\x07\xdb\x3b\x8f\xfe\xb4\x3d\x61\xee\xab\xe4\xee\x46\x57\x39\x80\x0d\x72\x9d\xce\xe0\xfe\x45\xb7\x9b\x8b\x64\xc4\x26\x91\x4e\x33\xdf\x17\x4b\x16\x3b\x0e\x12\x83\x2b\x6a\xcb\xa9\xa5\xc7\xf8\x7a\x20\xa9\xd2\xcb\xf6\x78\xfd\xd1\x1d\x52\xd4\xbf\xf8\x94\x56\x34\x9e\x4f\xa6\x51\x94\xba\x90\x93\x56\x96\x1d\xdc\xa6\x51\x98\xbe\x2f\x92\xd6\x38\x61\xba\x3c\x5e\xa5\x1b\x2d\xfb\x7f\xbf\xbf\xba\x7a\x8b\x12\x6f\x4c\x66\x52\x5b\x94\x64\x1e\x37\xb0\x3c\xc5\x1a\x22\x99\xb9\xb3\x8a\x8d\x79\x68\xe9\xed\xcf\xdc\x60\xd1\xd8\x5f\x0a\xa7\x36\x33\x2f\x6b\x91\x8c\x95\xb2\x5e\x1d\xaa\xae\x13\xdd\x33\x7a\x2d\xbc\x42\x25\xe6\x2d\xe4\xe5\xfb\xe5\x73\xe0\x18\xf8\x37\xb0\xa0\x17\xb2\x69\x2b\x2d\xa5\xb1\xf2\xcf\x00\x00\x00\xff\xff\xa7\x5b\x46\x21\xb7\x30\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 12471, mode: os.FileMode(420), modTime: time.Unix(1602257536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
