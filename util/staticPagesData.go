// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5d\x6f\x24\xc5\xd5\xbe\xf7\xaf\xa8\xb7\xb4\x82\xf1\xab\xed\x6e\x7b\xec\x1d\x91\x65\xda\x11\xec\x90\x60\xc5\x2c\x64\x8d\x11\x77\xab\x9a\xee\x33\xd3\xb5\xee\xae\xea\xad\xaa\x9e\xf1\x30\x1a\xc9\x90\x2c\x21\x08\xa4\x45\x01\x89\x10\xc8\x42\x04\x08\x45\x61\x9d\xab\x04\x41\x96\xfd\x31\x78\x6c\xef\x55\xfe\x42\x54\xfd\x31\xdd\x3d\xd3\xb6\x87\xac\x59\x1c\x6e\x66\xea\xeb\x9c\x3a\x75\x9e\x53\xe7\xe9\xee\xd3\xf4\x54\xe0\x23\x9f\xb0\xae\x8d\x5f\xf1\xf0\xda\xc2\x42\xd3\x03\xe2\xae\x2d\x20\xd4\x0c\x40\x11\xe4\x78\x44\x48\x50\x36\x8e\x54\xc7\x78\x02\xe7\x13\x9e\x52\xa1\x01\x37\x23\xda\xb3\xf1\xcb\xc6\xd6\x53\xc6\x15\x1e\x84\x44\xd1\xb6\x0f\x18\x39\x9c\x29\x60\xca\xc6\xeb\xcf\xd8\xe0\x76\xa1\x20\xc7\x48\x00\x36\xee\x51\xe8\x87\x5c\xa8\xc2\xd2\x3e\x75\x95\x67\xbb\xd0\xa3\x0e\x18\x71\xe7\x22\xa2\x8c\x2a\x4a\x7c\x43\x3a\xc4\x07\x7b\x79\x46\x0d\x89\x94\xc7\x45\x41\xc9\x0d\x9a\xee\xa5\xa8\xf2\x61\xad\xd5\xba\xba\x69\xfc\xf2\xf9\xa6\x95\x74\xf5\xc4\xff\x19\x06\x7a\x9a\x73\x25\x95\x20\x21\xba\xb2\xb9\x89\x0c\x23\x9e\xf0\x29\xdb\x46\x02\x7c\x1b\x4b\x35\xf0\x41\x7a\x00\x0a\x23\x4f\x40\xc7\xc6\x96\x54\x44\x51\xc7\x6a\x67\x82\x66\x40\x99\xe9\x48\x89\xe7\x16\x75\x78\x10\xf0\x4c\xa6\x69\x25\x5e\x5e\x68\xb6\xb9\x3b\x88\x75\xe8\x01\x10\xba\x89\x50\xd3\xa5\x3d\xe4\xf8\x44\x4a\x1b\x33\xd2\x6b\x13\x81\x92\x3f\xc3\x25\x62\x1b\xb5\xbb\xc9\xbf\xf4\x88\xcb\xfb\x86\x0c\x70\x22\x56\x16\xd4\x3e\x21\x94\x81\x40\xae\xd1\xf1\x61\x07\xdd\x88\xa4\xa2\x9d\x81\x91\x3a\xcb\x68\x83\xea\x03\xb0\x89\x30\x42\x4d\x92\x19\x8d\xcb\xdb\x1b\x6d\x41\x98\x9b\x29\x22\x3e\xed\x32\x83\x2a\x08\xa4\xe1\x00\x53\x20\x0a\x3a\x10\x6a\xca\x5e\x17\xed\x04\x3e\x93\x36\xd6\x51\x72\xd9\xb2\xfa\xfd\xbe\xd9\x5f\x31\xb9\xe8\x5a\xf5\xa5\xa5\x25\x4b\xf6\xba\x18\x25\x80\xe3\xfa\x12\x46\x1e\xd0\xae\xa7\x92\x76\x87\xfa\xbe\x8d\x19\x67\x80\x91\x54\x82\x6f\x83\x8d\x9d\x48\x08\x60\xea\x0a\xf7\xb9\xc0\x85\xad\x50\xba\xc2\xf0\x29\x03\x87\x84\x36\x16\x3c\x62\x2e\x2e\x0e\xdf\xe0\x94\x4d\x8f\x67\x5b\x63\x44\x04\x25\x86\x47\x5d\x17\x98\x8d\x95\x88\x60\x72\xf2\x40\x18\xf5\xf2\x5e\x3a\x68\x9f\xe6\x3b\x36\x5e\x42\x4b\xa8\xbe\x8a\xea\xab\x18\x75\xb8\x13\x49\xd2\xf6\xc1\xc6\x1d\xe2\x4b\x28\x79\x02\xa1\x66\x48\x94\x87\x5c\x1b\x3f\x57\x5f\x41\xcb\x3f\x23\x75\x54\x47\x5a\x7a\xd9\xa8\xa3\xfa\xb3\x2b\xc5\xbe\x51\x7f\xe9\x89\xbc\x8f\xea\x46\xdd\x5b\xf5\xeb\xc6\x8a\xd7\xf0\xeb\x68\xc5\x5b\x2d\xce\xa1\xfa\x2b\x18\x59\x53\x5b\x39\x54\x38\x3e\x20\x67\xc7\xc6\xcb\x75\x8c\x9c\x81\x8d\x97\x57\x30\x12\x36\x5e\xd5\x8b\x9b\xda\xeb\x65\x9c\x94\xe0\xac\x9b\x5f\x92\xb4\x9f\x87\x83\x45\x26\x81\x65\xb9\xb4\x97\x06\x67\xd6\x4c\x82\x38\x89\xd9\xf8\x5e\x12\xca\x90\xe0\xda\x15\xba\xa9\x9d\x3d\x48\x3a\xa2\x4b\x99\xa1\x78\x78\x19\x2d\x5f\x0a\x77\xf0\x6c\x90\x0b\xde\x3f\x26\x86\x7d\x23\x70\x8d\x06\xe2\x9d\x8e\x04\xa5\xdb\x2b\xc5\x78\xed\x70\x11\x20\xe2\x28\xca\x99\xbe\x69\xa4\x07\x18\x05\xa0\x3c\xee\xda\x38\xe4\x52\xe9\x84\x56\x38\x70\x3b\x52\x8a\x33\xa4\x06\x21\xd8\x58\x46\xed\x80\xaa\x09\xdc\x6d\xc5\x50\x5b\x31\x23\x14\x34\x20\x62\x30\x6d\x7d\x9b\x2b\xc5\x83\xe4\x00\x4f\xe2\xb5\x4d\xd2\x83\xa6\x95\xe8\x2b\xef\x51\xb0\x5e\x27\x38\x1f\xd4\x74\x48\x78\x97\xa6\x16\x5c\xbf\xae\x1d\x89\xd7\x5a\x57\x37\x0f\x3e\x7c\x7b\xfc\xe6\x27\xe3\xf7\x5e\x6f\x5a\xde\xa5\x29\xb9\x59\xcd\xd7\xaf\xeb\xf4\x51\x3e\xe4\xf4\x52\xed\x22\xa3\x2b\x78\x14\xa2\xa2\x97\x0b\x8b\x7d\xd2\x06\xbf\xe8\x71\x19\x18\x75\xa4\x1b\xb1\x6c\x3c\x8d\xd7\x9a\x56\xdc\xa8\x90\x9f\xc2\x4b\x06\xc6\xf2\x52\xc5\x3e\x15\x66\x39\x1e\x38\xdb\x28\x6f\x1a\x94\xe9\x1b\x3b\xb3\x77\x85\x2e\x84\x9a\x94\x85\x91\x9a\xd5\x67\xc4\xe3\x38\x45\x59\x10\x97\x72\x9c\xd2\x45\x8b\xc9\xab\x24\x00\x8c\xa8\x6b\x63\xe2\x53\x97\x49\x8c\x7a\xc4\x8f\x20\xef\x72\xe6\xf8\xd4\xd9\xce\x06\xae\x68\x95\xe0\xfe\x22\x62\xb5\x45\x8c\x86\x43\xda\x41\x70\x13\x5d\x30\x5b\x57\x37\x4d\xad\x0b\x65\x82\xa3\x91\x93\x2c\x1d\x0e\x81\xb9\xa3\xd1\x31\x46\x97\x9c\x5d\x30\x3a\x39\xa9\xf6\xc5\xc4\x94\x6a\x0d\x08\x3d\x15\x4f\xd7\x1e\xbc\x7f\xff\xc1\xef\xde\xda\xff\xfa\x9d\xc5\xea\x9d\x8e\xc3\xab\x74\x99\xcf\x33\x40\x2e\x93\x21\x77\x27\x00\x65\xdd\x09\x40\xc9\xc0\xe9\x00\xa5\x82\x67\x08\x50\xaa\xf1\x38\x80\x5a\xf1\x74\xed\xe8\xd6\xb7\x47\x77\xf7\x7e\xc2\x00\x39\x3e\x8f\xdc\x8e\x4f\x04\x4c\x40\x2a\x0e\x4d\x80\xca\x07\x4f\x07\xab\xa0\xe0\x0c\x01\x2b\x68\x3d\x0e\xb4\x2b\x93\x25\x67\x87\x96\x0c\x88\xef\x67\xb1\x7c\xdd\x03\x3f\xc4\x25\x43\x15\xec\x28\xa4\x7f\x8c\x20\x52\xe0\xea\x24\x1b\x8b\x54\x24\xd9\xaa\x3d\xd2\xc1\x33\x48\xfe\xb1\x93\x5a\x4c\xae\xb7\x26\x57\x6f\xdd\xdd\x48\x1c\x78\x1a\x31\xac\xb7\xce\x82\x1a\x2a\x42\x91\x33\x25\xb8\x5f\x88\xbc\xcc\xba\xb4\x99\x86\xdc\x70\x18\x87\xcf\x7a\x6b\x34\xaa\x3a\xe0\xa3\x71\xdc\x26\x38\x42\x3f\xf3\xa7\xce\x4b\xba\x73\x3a\x30\x59\xfc\xa8\x9c\x58\xb4\xb4\xd0\x2d\x3b\x33\x19\x7d\x38\x87\xce\x2c\x9c\x5d\xf4\x30\x0f\x4b\xeb\x2f\xbc\xb4\xfa\xc8\x1f\x92\x62\xb8\x69\xd8\x5b\xbd\x0e\x8c\x24\x6f\xba\x65\x70\xf1\xda\xc1\xfb\x7b\xe3\xdb\x9f\x8f\x6f\xef\x1d\xbe\xfb\xc5\xd9\x61\x9a\xa4\xe2\x38\xb1\xb5\xf9\x0e\xae\xcc\xd9\x3a\xf1\x57\x3e\x74\xc7\x8f\xac\x31\xe0\x25\xd3\x93\x90\x58\x0f\x7b\xab\xcf\xa4\x23\x79\x42\xd6\xa3\x66\x32\x8c\xf4\x5b\xd1\xe9\xb9\xf8\x51\x5c\xb4\xd8\xfc\x48\xcc\x71\xa7\x0e\xee\x7c\x76\xb4\xf7\x97\xad\x6b\x1b\x67\x0d\x41\x71\xf7\xaa\x1b\xa6\x1d\xb7\xa5\xd7\x4c\xdc\x1d\x4b\xc4\xaf\x99\x2e\x48\x47\xd0\x36\xb8\xed\x41\x3e\x97\xd2\x42\x7e\xff\x62\xd7\x6f\x5d\xdb\xa8\xbc\x7d\x25\x52\x99\x52\x71\x22\xb3\x1c\x7c\xf9\xe9\xd6\xb5\x8d\x07\x1f\xee\x1e\xdd\x7f\x77\xfc\xa7\x3f\xef\xdf\xfb\xf8\xf0\x83\xdf\x8e\x6f\xfd\xed\xf0\xde\x3b\xfa\x26\x8d\x3f\xfc\xfb\xf8\xa3\xdd\xef\x76\x5f\x1b\x7f\xfe\xda\xbf\xff\xf5\x81\x7e\x6d\x97\x97\x2d\x8b\x84\xd4\xd0\xbb\x98\x34\x34\x65\xdb\xa2\xe1\x77\xbb\xaf\x66\x73\xc1\x80\x86\x26\x0d\x69\x68\x32\x50\x85\xf1\xb0\x67\x4a\xee\x45\xa6\xc3\x03\xcb\xa1\x6a\x70\x43\x72\xf6\x73\x0a\x76\xfc\x01\xe9\x47\x25\xb8\xd8\x5f\x2e\xd7\x2f\xa7\xf2\xf4\x10\x6a\x25\x0b\xcf\x22\x80\x34\x10\x44\x00\xa9\x0e\x9c\x09\x94\x13\xd3\xf2\x50\x6a\x65\x43\x82\xf7\xa5\x8d\x57\x8e\x8d\xa4\x54\x36\x09\x85\xb5\x85\xe1\xd0\x40\x82\xb0\x2e\xa0\x0b\xf4\x22\xba\xd0\x43\x97\x6d\x94\x44\x56\xaa\x71\x34\x5a\x18\x0e\x2f\xf4\xe2\x3f\x03\x01\x73\x91\x31\x1a\x55\x3e\xdc\x64\xc6\xcf\x13\x8c\x25\x2b\x4e\x0e\xc8\xfd\xaf\x76\x8f\x3e\x79\x6b\xff\xab\xdd\xfd\xaf\xfe\x3a\xbe\x73\x67\x7c\xfb\xed\x87\x8f\x8d\x1f\x9e\x72\x1a\xdf\x8f\x72\xca\x26\x9f\x61\x1c\x37\xfe\x77\x09\xa8\x31\x4b\x40\x8d\x4a\x02\x6a\x9c\x4b\x02\x6a\x9c\x5b\x02\x9a\xf8\x37\x5e\x92\x3b\x77\xeb\x58\x02\x6a\xcc\x12\xd0\x54\xe6\x6f\x4c\x32\xff\x1c\x64\xd4\x38\x1b\x32\x6a\x9c\x4c\x46\x8d\x2a\x32\xea\x35\xcc\x98\x8f\x7c\x62\x69\xbe\x29\xcc\xc8\x10\xc0\x35\x19\x44\x0d\x13\xdc\xc8\x74\x98\xd5\x05\xb5\xfe\x82\x19\x7a\xe1\x8f\x4d\x46\x8d\xf3\x4b\x46\x8d\x0a\x32\x6a\xcc\x49\x46\x8d\x79\xc9\xa8\xf1\x43\x92\x51\xe3\x27\x4e\x46\xe3\x5b\xff\x18\xdf\xfd\xcd\x83\x5b\x6f\x1f\xde\xbb\x7b\x1e\x48\x69\x4b\x82\x60\xf1\xa7\xa1\xd3\x62\xf9\xf0\x8f\xdf\x8c\xef\xbd\x77\xf8\xee\x17\x07\x6f\xfc\x33\xf6\xf4\x23\x78\xf1\xcd\xad\xd3\xe1\x91\xf7\xf2\xc7\xee\x6c\x6c\x34\xaa\x0a\xeb\x6c\x36\x0b\xe9\x0a\x1b\xf2\xe8\x2b\x2f\x3e\x2d\xf2\xbe\xde\xbf\xff\xd1\xc1\x9b\x9f\x26\x49\x70\xff\xfe\x27\x07\xaf\xee\x8d\xef\xfe\x7e\x7c\xeb\x8b\x8b\x68\xfc\xcd\xd7\x47\x77\xef\x1e\x7d\xfb\x87\xf1\xad\xcf\x7e\xd4\x64\xf5\x02\x91\xb2\xcf\x85\x3b\x2f\xb8\xe3\xbd\xd7\x0f\x3f\x7e\xf5\x07\x46\x36\xe1\xc3\x70\x62\x5a\x82\x74\x6e\xaa\x86\x22\xef\xe5\x48\x67\x63\xd5\x48\x67\xfa\xe6\x42\xba\xbc\xf8\xdc\x20\x3d\x4f\xea\xf9\x3e\xb5\xb0\xe3\xca\x5d\x4d\x4b\x1f\xb5\xa2\x46\x58\x59\xc5\x2b\x55\xee\xc2\xdc\x59\x4c\x19\xfd\xb8\xfe\x6b\xf8\xfa\x17\x44\xe2\xb6\xb6\x00\xb2\x5d\x5d\x44\x8c\x8b\x70\xb1\xa0\xa4\xaf\xc0\x65\xb4\xbc\x32\x79\xc0\xf4\x79\x57\xe2\xb5\xa6\x15\x9e\x5c\xb9\xd4\xcc\x10\x1f\xa4\xa9\xa1\x0f\x55\xb2\xa0\x13\xb1\xb8\x96\x88\xba\xa0\x7e\x1d\x81\x18\xbc\xa4\xe3\xa3\xed\x43\x6d\x71\x98\xaa\xeb\x11\x81\x6e\xea\x29\x64\xa3\x3e\x65\x2e\xef\x9b\x3e\x77\x88\x96\x32\x25\x10\xe1\x78\xa6\x8c\xda\x52\x09\xca\xba\xb5\xe5\xc5\x27\x53\x31\xda\x41\xb5\x54\xcc\xb6\x11\x96\xa4\x07\xcf\x6f\xdb\x71\xbd\x79\x11\x0d\x27\x6e\x99\xd6\xe8\x09\xe8\x20\x1b\x61\x2b\x2f\x44\x13\x1f\x84\xaa\xe1\xfd\xfb\x1f\x8d\xbf\x7c\xff\xe0\x8d\xdb\xe3\x37\xef\xe0\xac\xc0\x90\x70\x66\xf2\x3b\x7b\x84\x85\xcc\xfe\x36\x74\xb8\x80\xf8\x2b\xaa\x8d\xf1\x42\xf9\xe8\xb3\x65\xaf\x89\x7d\x2e\x77\xa2\x00\x98\x32\xbb\xa0\x9e\xf1\x41\x37\x9f\x1e\xac\xbb\xb5\xf4\x83\xec\xa2\xe9\xd2\xb8\x14\xee\xda\x28\xae\x85\x17\xce\x5e\xd8\x32\xaf\x86\x9c\xaa\x2f\xb9\xb3\x45\x7b\x17\x4e\x33\xa5\xf0\xe5\x7a\xd1\xa4\x8c\x81\x78\xf6\xc5\xe7\x36\xb4\x0f\x9f\x72\x1c\x90\xf2\x57\x30\x40\xeb\x2d\x3c\x87\x9a\xe2\x37\xdc\x63\x55\xa5\x9f\x4f\xe7\x50\x97\xa4\x88\x29\x45\xd9\x43\xaa\x20\x81\xe9\x70\x26\xb9\x0f\x26\xf1\xe9\x20\x62\xf1\xe7\x93\x80\x30\xd2\x05\x8b\x6c\xe3\x14\xd8\x32\x54\xb3\x05\xb0\x9f\x08\x54\x0f\x0d\xd0\x8b\x7c\x1b\xd8\x43\xa3\x92\x21\x92\xf8\x59\xbf\x3a\x10\xc7\xe1\x11\x53\x96\xca\xf5\x4f\x83\x52\x5d\xec\x3a\x1d\x98\xe3\xbd\x91\x9d\xa3\xe0\x5b\x64\xcf\x89\xc8\xf7\x0f\x07\x9d\x93\xe6\x95\x4a\x41\xc7\xe7\x02\x2d\x97\x48\xcf\xcc\xbd\x1f\x5f\xa0\x50\xf0\x0e\xf5\x21\x7e\x75\x8c\x31\x93\x25\xd0\x74\x32\x74\x93\x8a\x26\xb2\xd1\xe3\xc3\x61\x5e\x89\x1c\x8d\x1e\x4f\xd6\xc8\x3e\x55\x8e\x57\x4b\x97\x4d\x78\xc0\x21\x32\xaf\xfd\x5f\x2e\xa4\xf0\xd9\xfc\x39\x99\x8a\x19\xed\xc9\x52\xae\xce\x14\xa5\x15\xe5\xa2\xa2\xd9\xdb\x3d\x8f\xa2\x42\xa5\xb3\xa8\xac\x3a\x2a\x4f\x56\xe8\x42\x87\x44\xbe\xfa\xef\x0f\x37\x8a\xa9\x36\x23\xd8\x93\xc8\x76\x83\x77\x65\xe1\x92\x68\x5c\xc8\x0d\xb2\x83\x6c\xc4\xa0\x8f\x5e\x7e\x6e\xe3\x59\xa5\xc2\x6b\x70\x33\x02\xa9\x6a\x13\x52\xd5\x4b\x4c\x1e\x02\xab\xe1\x2e\x28\x7c\x11\x5b\x31\xfb\x97\xe7\x25\x30\x77\x5a\x84\x09\x20\xee\x40\x2a\xa2\xc0\xf1\xe2\x17\x53\x3b\x37\xa7\x56\x24\x64\x9d\x10\x63\x99\x58\x62\x53\x4b\xd8\xf6\x2a\x7a\xec\xb1\x54\xb9\x22\x2a\x92\xb6\x5d\x5f\x5a\x2a\x4a\x9d\x10\xc5\x89\x85\xa5\x08\x4e\xf5\xcb\x90\x33\x09\x2f\xc2\x8e\x4a\xf5\x7c\xb7\xbb\x3b\x9a\xf2\x67\xc6\xec\x89\xbf\x92\xf8\x04\xb5\xce\x14\x88\x1e\xf1\x6b\xe9\xcc\x45\x74\x09\xfd\x3f\x5a\x5e\x5a\x5a\x5a\x2c\x23\xd0\xb4\x3c\x15\xf8\x6b\xff\x09\x00\x00\xff\xff\x01\x61\xc9\x20\xf5\x29\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 10741, mode: os.FileMode(420), modTime: time.Unix(1599719144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
