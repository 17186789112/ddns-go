// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x6f\x1b\xb7\x96\x7f\xf7\xa7\x60\x59\x03\x92\x16\x9e\x19\x5b\x76\xd4\xd4\xd5\xa8\x68\xa3\xee\xc6\xd8\x24\x0d\xe2\xa4\xe8\x9b\x41\xcd\x50\x1a\xda\x33\xe4\x84\xe4\xc8\x56\x04\x01\x69\x77\xd3\x6d\x8b\x64\x91\xec\xb6\xbd\xbd\x6d\xd3\x34\x45\x5b\x04\x17\xb7\x4e\x9f\xee\x0d\x92\xa6\xfe\x30\xb5\x6c\xe7\xe9\x7e\x85\x0b\x72\x34\xa3\xd1\xbf\x58\x6d\x9c\x34\x37\x7e\xb0\x66\xc8\xc3\xc3\xc3\xf3\xfb\xf1\x1c\x72\xc8\xb2\x27\x03\x1f\xf8\x88\x36\x6c\x78\xc9\x83\x95\x99\x99\xb2\x87\x91\x5b\x99\x01\xa0\x1c\x60\x89\x80\xe3\x21\x2e\xb0\xb4\x61\x24\xeb\xc6\x71\xd8\xaf\xf0\xa4\x0c\x0d\x7c\x31\x22\x4d\x1b\xbe\x6b\x5c\x78\xc3\x38\xc1\x82\x10\x49\x52\xf3\x31\x04\x0e\xa3\x12\x53\x69\xc3\x95\xb7\x6c\xec\x36\x70\xa6\x1d\x45\x01\xb6\x61\x93\xe0\xcd\x90\x71\x99\x11\xdd\x24\xae\xf4\x6c\x17\x37\x89\x83\x0d\xfd\x32\x07\x08\x25\x92\x20\xdf\x10\x0e\xf2\xb1\xbd\x30\xa2\x06\x45\xd2\x63\x3c\xa3\x64\x9d\xf4\xfa\x92\x44\xfa\xb8\x52\xad\x9e\x59\x35\xfe\xe3\xed\xb2\x15\xbf\xaa\x8a\x97\x0c\x03\xbc\xc9\x98\x14\x92\xa3\x10\x9c\x58\x5d\x05\x86\xa1\x2b\x7c\x42\x37\x00\xc7\xbe\x0d\x85\x6c\xf9\x58\x78\x18\x4b\x08\x3c\x8e\xeb\x36\xb4\x84\x44\x92\x38\x56\x2d\x69\x68\x06\x84\x9a\x8e\x10\x70\xea\xa6\x0e\x0b\x02\x96\x69\x23\x1c\x4e\x42\x09\x04\x77\xfa\x32\xeb\x17\x23\xcc\x5b\xc6\xa2\x79\xcc\x5c\xd0\x3d\xac\x0b\x58\x29\x5b\xb1\x68\x65\xa6\x6c\xc5\xd8\xcc\x94\x6b\xcc\x6d\x69\x2d\xaa\x00\x73\xf5\x08\x40\xd9\x25\x4d\xe0\xf8\x48\x08\x1b\x52\xd4\xac\x21\x0e\xe2\x1f\xc3\x45\x7c\x03\xd4\x1a\xf1\xaf\xf0\x90\xcb\x36\x0d\x11\xc0\xb8\xd9\x60\x43\xe5\x49\x44\x28\xe6\xc0\x35\xea\x3e\xde\x02\xeb\x91\x90\xa4\xde\x32\x7a\x2e\x36\x6a\x58\x6e\x62\x4c\xd3\xc6\x00\x94\x51\x32\x54\x38\xd8\xbd\x51\xe3\x88\xba\x89\x22\xe4\x93\x06\x35\x88\xc4\x81\x30\x1c\x4c\x25\xe6\x19\x1d\xca\x21\xcd\x06\xd8\x0a\x7c\x2a\x6c\xa8\xb8\xb5\x6c\x59\x9b\x9b\x9b\xe6\xe6\xa2\xc9\x78\xc3\x2a\xce\xcf\xcf\x5b\xa2\xd9\x80\x20\xa6\x09\x2c\xce\x43\xe0\x61\xd2\xf0\x64\xfc\x5c\x27\xbe\x6f\x43\xca\x28\x86\x40\x48\xce\x36\xb0\x0d\x9d\x88\x73\x4c\xe5\x09\xe6\x33\x0e\x33\x5d\x81\x9e\x84\xe1\x13\x8a\x1d\x14\xda\x90\xb3\x88\xba\x30\x5b\xbc\xce\x08\x1d\x2e\x4f\xba\x86\x00\x71\x82\x0c\x8f\xb8\x2e\xa6\x36\x94\x3c\xc2\xe9\xc8\x03\x6e\x14\x07\xfb\x52\x54\x7f\x93\x6d\xd9\x70\x1e\xcc\x83\xe2\x12\x28\x2e\x41\x50\x67\x4e\x24\x50\xcd\xc7\x36\xac\x23\x5f\xe0\x01\x4f\x00\x50\x0e\x91\xf4\x80\x6b\xc3\xd3\xc5\x45\xb0\xf0\x2a\x2a\x82\x22\x50\xad\x17\x8c\x22\x28\x9e\x5c\xcc\xbe\x1b\xc5\x77\x8e\xf7\xdf\x41\xd1\x28\x7a\x4b\x7e\xd1\x58\xf4\x4a\x7e\x11\x2c\x7a\x4b\xd9\x3a\x50\xbc\x04\x81\x35\xd4\x95\x43\xb8\xe3\x63\xe0\x6c\xd9\x70\xa1\x08\x81\xd3\xb2\xe1\xc2\x22\x04\xdc\x86\x4b\x4a\xb8\xac\xbc\x3e\x88\x93\xe4\x8c\x36\xfa\x53\xab\xf7\xde\xa7\x83\x85\x52\x62\x59\x2e\x69\xf6\xc8\x99\x3c\xc6\x24\x8e\x39\xab\x67\x33\x22\x14\x70\xa6\x5c\xa1\x1e\x95\xb3\x5b\xf1\x0b\x6f\x10\x6a\x48\x16\x2e\x83\x85\x63\xe1\x16\x1c\x25\x39\x67\x9b\x13\x38\xec\x1b\x81\x6b\x94\x00\xab\xd7\x05\x96\xea\x79\x31\xcb\xd7\x3a\xe3\x41\x65\x26\x3b\xa6\x5a\x24\x25\xa3\x49\xfb\x9a\xa4\xa0\x26\xa9\x11\x72\x12\x20\xde\x02\x22\xaa\x05\x44\xae\xd5\xe4\x88\x75\x35\x26\x25\x0b\x62\x03\x5f\x83\x95\x55\xd4\xc4\x65\x2b\x56\x36\xd8\x41\xc6\x3a\xe4\x63\x2e\x81\xfe\x6f\x88\xc8\x71\xb0\x10\xa9\x5a\x97\x88\xd0\x47\xad\x65\xa0\x88\xfc\xda\x30\x2b\x62\x4f\x03\xe2\xda\x90\x63\x11\xf9\xf2\xb4\x68\xc0\xca\xee\xce\xcd\xee\x8f\x9f\xef\x7d\x78\xbd\xfb\xf1\xad\x51\x34\x52\xcf\x4f\xb0\x46\x05\x61\x1f\xcb\xe1\xae\xbc\x63\x43\x02\x6b\x6b\x0a\x36\x58\xa9\x9e\x59\xdd\xfb\xea\x5a\xf7\xe3\xdb\xdd\x4f\x3f\x28\x5b\xde\xb1\xa1\x76\xa3\x9a\xd7\xd6\x54\xb0\x82\x03\x06\x0c\x8b\x2a\x40\x8c\x06\x67\x51\x08\xb2\x98\x66\x84\x7d\x54\xc3\x7e\x16\x5f\x11\x18\x45\xa0\x1e\x74\x5b\x5d\xad\x42\xa5\x7e\x18\xd3\x7e\x88\x1d\x22\x30\x16\xe6\xc7\xf4\x33\xc6\x2c\xc7\xc3\xce\x06\xe8\x3f\x1a\x84\xaa\xf8\x30\xd2\xf7\x18\x5d\x00\x94\x09\x0d\x23\x39\xaa\xcf\xd0\xe5\x10\xc8\x56\x88\x6d\xc8\x91\x4b\x18\xec\xa5\xb4\x2a\x15\x67\x50\x80\xa1\x86\x19\xf9\xc4\xa5\x02\x82\x26\xf2\x23\xdc\x7f\x65\xd4\xf1\x89\xb3\x91\x14\x9c\x50\x2a\xb1\xfb\xef\x11\xcd\x17\x20\x68\xb7\x49\x1d\xe0\x8b\x60\xd6\xac\x9e\x59\x35\x95\x2e\x90\x34\xec\x74\x9c\x58\xb4\xdd\xc6\xd4\xed\x74\x26\x18\x3d\xe0\xec\x8c\xd1\xf1\x48\x95\x2f\x52\x53\xc6\x6b\x00\xe0\x0d\x5d\x9d\x7f\xf4\xf9\xce\xa3\xff\xb9\xba\x7b\xff\x46\x61\x7c\x4f\x93\xf0\x1a\x08\x1d\xcf\x33\x40\x2e\x15\x21\x73\x53\x80\x92\xd7\x14\xa0\xb8\xe0\x70\x80\x7a\x0d\x8f\x10\xa0\x9e\xc6\x49\x00\x55\x75\x75\xfe\xe0\xca\x2f\x07\xdb\x77\x5f\x60\x80\x1c\x9f\x45\x6e\xdd\x47\x1c\xa7\x20\x65\x8b\x52\xa0\xfa\x85\x87\x83\x95\x51\x70\x84\x80\x65\xb4\x4e\x02\xed\x44\x2a\xf2\x82\xa2\xe5\x45\x68\x13\x13\xed\x89\x14\xae\x81\xb2\x14\xaf\x4c\xe9\xe1\x80\x65\x55\x1c\x21\x62\x59\xb5\x93\x20\xeb\x5e\xfb\xdf\xdd\x7b\xf7\x77\xef\xdf\x38\x3a\xc4\x44\x80\x7c\x3f\x89\x3e\x6b\x1e\xf6\x43\x38\x60\xa8\xc4\x5b\x12\xa8\x7f\x46\x10\x49\xec\xea\x1d\x84\x6a\x32\x26\x2d\x8e\xeb\x63\x74\xbd\x00\x7e\x67\xba\xd6\x4e\xaa\x52\xb1\x52\x4d\x83\xe5\x8a\x7b\x2a\x76\xe0\x61\xa9\x7c\xa5\x7a\x14\xc9\x7c\x0c\x1d\x19\x95\x9c\xf9\x19\xf6\x25\xd6\xf5\x1e\x7b\xac\x6b\xb7\x35\x7f\x56\xaa\x9d\xce\xb8\x01\x3e\x1b\xc7\xad\x62\x87\xab\x9d\x64\xcf\x79\xf1\xeb\x94\x0e\x8c\x85\x9f\x95\x13\xb3\x96\x66\x5e\x07\x9d\x19\x97\x3e\x99\x43\x47\x04\x8f\x76\x79\xbb\x72\xf6\x9d\xa5\x67\xbe\xac\xd5\x70\x93\xb0\xb9\xb4\x86\x29\x8a\xbf\x9f\x0c\x82\x0b\x2b\x7b\x9f\xdf\xed\x5e\xff\xa1\x7b\xfd\xee\xfe\x27\x77\x8e\x0e\xd3\x38\x1c\xeb\xc0\x56\x63\x5b\x70\x6c\xdc\x56\xc1\x7f\xec\xa6\x4c\x6f\x79\x34\xe0\x03\xa6\xc7\x94\x58\x09\x9b\x4b\x6f\xf5\x4a\xfa\x11\x59\x95\x9a\x71\x31\x50\xbb\xe6\xc3\x63\xf1\xb3\x98\x68\xda\xfc\x88\x4f\x31\xa7\xf6\x6e\x7d\x7f\x70\xf7\xdb\x0b\xe7\x4e\x1d\x35\x04\xd9\xde\xc7\xcd\x30\xe5\xb8\x0b\x4a\x26\x75\xb7\x6e\xa1\x3f\x43\xb8\x58\x38\x9c\xd4\xb0\x5b\x6b\xf5\xeb\x7a\x69\xa1\x3f\xff\xb4\xeb\x2f\x9c\x3b\x35\x76\xf6\x0d\x24\x95\x21\x15\x8f\xcd\x2c\x7b\x3f\x7e\x77\xe1\xdc\xa9\x47\x5f\x5d\x3e\xd8\xf9\xa4\xfb\xe5\xd7\xbb\x0f\xbf\xd9\xff\xe2\xbf\xbb\x57\xfe\xba\xff\xf0\x86\x9a\x49\xdd\xaf\x7e\xea\xde\xbc\xfc\xeb\xe5\xf7\xbb\x3f\xbc\xff\x8f\x9f\xbf\xf0\xa4\x0c\xc5\xb2\x65\xa1\x90\x18\xaa\x17\x93\x84\xa6\xa8\x59\x24\xfc\xf5\xf2\x7b\x49\x5d\xd0\x22\xa1\x49\x42\x12\x9a\x14\xcb\x4c\x79\xd8\x34\x05\xf3\x22\xd3\x61\x81\xe5\x10\xd9\x5a\x17\x8c\xbe\x4e\xb0\xad\x3f\x4b\xfe\xa1\x09\x4e\xfb\xcb\x65\x01\x22\x6a\x6b\x76\x18\x85\xaa\xb1\xe0\x51\x10\x48\x01\x81\x38\x46\xe3\x89\x93\x42\x99\x9a\xd6\xa7\x52\x35\x29\xe2\x6c\x53\xd8\x70\x71\x22\x93\x7a\x6d\x63\x2a\x54\x66\xda\x6d\x03\x70\x44\x1b\x18\xcc\x92\x39\x30\xdb\x04\xcb\x36\x88\x99\xd5\xd3\xd8\xe9\xcc\xb4\xdb\xb3\x4d\xfd\x63\x00\x4c\x5d\x60\x74\x3a\x63\x17\x37\x89\xf1\xd3\x90\x71\xc0\x8a\xc7\x13\x72\xf7\xde\xe5\x83\xdb\x57\x77\xef\x5d\xde\xbd\xf7\x97\xee\xad\x5b\xdd\xeb\xd7\x9e\x9c\x1b\x4f\x3f\xe5\x94\x7e\x5b\xca\x19\x34\xf9\x08\x79\x5c\xfa\xd7\x4d\x40\xa5\xd1\x04\x54\x1a\x9b\x80\x4a\xcf\x65\x02\x2a\x3d\xb7\x09\x28\xf5\xaf\x16\xe9\x3b\xf7\xc2\xc4\x04\x54\x1a\x4d\x40\x43\x91\xbf\x94\x46\xfe\x29\x92\x51\xe9\x68\x92\x51\xe9\xf1\xc9\xa8\x34\x2e\x19\x35\x4b\xa6\xce\x47\x3e\xb2\x54\xbe\xc9\xd4\x88\x10\x63\xd7\xa4\x38\x2a\x99\xd8\x8d\x4c\x87\x5a\x0d\x2c\x57\xce\x9a\xa1\x17\xfe\xd1\xc9\xa8\xf4\xfc\x26\xa3\xd2\x98\x64\x54\x9a\x32\x19\x95\xa6\x4d\x46\xa5\xa7\x99\x8c\x4a\x2f\x78\x32\xea\x5e\xf9\x5b\x77\xfb\xbf\x1e\x5d\xb9\xb6\xff\x70\xfb\x79\x48\x4a\x17\x04\xe6\x54\x7f\x1e\x3a\x8c\xcb\xfb\x7f\x7e\xd0\x7d\xf8\xe9\xfe\x27\x77\xf6\x3e\xfc\xbb\xf6\xf4\x33\xd8\xf8\xf6\xad\x53\xf4\xe8\xbf\xf5\x97\xdd\x49\x59\xa7\x33\x8e\xd6\x49\x6d\x42\xe9\x31\x36\xf4\xd9\x37\x28\x7c\x18\xf3\xee\xef\xee\xdc\xdc\xfb\xf8\xbb\x38\x08\xee\xee\xdc\xde\x7b\xef\x6e\x77\xfb\xa3\xee\x95\x3b\x73\xa0\xfb\xe0\xfe\xc1\xf6\xf6\xc1\x2f\xff\xdf\xbd\xf2\xfd\x1f\x1a\xac\xce\x22\x21\x36\x19\x77\xa7\x05\xb7\x7b\xf7\x83\xfd\x6f\xde\x7b\xca\xc8\xc6\xf9\x30\x4c\x4d\x8b\x91\xee\x9b\xaa\xa0\xe8\xbf\xf5\x91\x4e\xca\xc6\x23\x9d\xe8\x9b\x0a\xe9\x41\xe1\xe7\x06\xe9\x69\x42\xcf\xd3\x3d\x48\x2d\x5b\xf1\xd1\xed\x18\x7b\xc6\x9c\xff\x0e\x9c\xf9\x86\x7d\x37\x52\x69\x6c\xea\x9b\x03\x86\xaf\xfe\xc7\xee\xac\x71\x8c\x36\xc6\x1f\x3e\x6b\x9b\x74\x33\x41\x2e\xe1\x65\xb0\xb0\x98\x2e\x3c\x7d\xd6\xd0\x37\x34\xc2\xc7\x9f\x78\xab\x8c\xa1\x87\x51\x4e\xae\x72\x28\x81\xd9\x7c\x3d\xa2\x8e\x24\x8c\xe6\x0b\xed\x5e\xfb\xd9\x3c\x34\x33\x5e\x2a\x98\x8c\xe6\x73\xfa\x93\x77\x6e\x2e\x95\xc6\x05\xd0\x4e\x47\x86\xcd\x90\xe3\x26\xa6\xb2\x8a\xeb\x28\xf2\x65\xbe\xf0\x5a\x5a\x37\x9b\xcf\xa9\xe8\x9c\x2b\x98\x88\x92\x00\x49\x9c\x6f\x03\xe1\x70\xe6\xfb\xe7\xd5\xc8\xe6\x41\x67\x0e\x2c\xce\xcf\x67\x5b\x98\x68\x1d\x6d\xe5\xdb\x19\x4c\x03\x2c\x3d\xe6\x2e\x03\x78\xf6\xed\xd5\xf3\x70\x2e\x53\x13\x71\x7f\x19\x40\x4b\xa0\x26\x1e\x28\x77\x91\x44\xcb\xaa\x73\x85\x56\xae\x60\x0a\xcc\x09\xf2\xc9\x25\x9c\x2f\x64\xc5\x7a\x87\xdf\xcb\x20\x19\x18\xc8\xc7\xc7\xda\xd9\xe1\xf5\x86\x61\xea\xf3\xf2\x5c\xc1\x74\x84\xc8\x27\xc7\xe4\x70\x0e\xc0\x9a\xcf\x9c\x0d\x98\x19\x81\xfa\x23\xf5\x44\x15\x78\xc9\xb6\x01\x64\x1b\x70\x58\xe7\xa0\x56\xe4\xba\x27\x14\x3d\xf2\xf1\xe9\xbc\xe1\xaa\x75\x05\x87\xc3\x87\x62\xb3\xf9\xdc\xcb\xe9\xc9\x7b\xae\x60\x7a\x32\xf0\x13\x9b\x07\x44\x3b\x00\xfb\x02\x8f\x74\x69\x59\x80\x6d\x0c\x95\x09\x2c\xcf\x93\x00\xb3\x48\x8e\xa1\xc3\x74\x3e\xd0\xb7\x5e\x86\x5c\x00\x7a\xd8\xce\x0f\x19\x36\x93\x15\xc8\xbc\x60\xce\x19\xef\x43\x91\x5f\xbf\xf8\xee\xc9\x73\xc3\x4e\xd3\x06\xc4\x55\xa6\x90\x48\x46\xe2\x3c\xde\x92\x03\x3d\xf7\x3b\xe8\x24\x3d\x77\x0a\xf1\x0c\x4e\x7e\x9b\x88\x83\x1a\xae\x33\x8e\xf5\x27\x77\x1b\xc2\xb8\x3c\xa5\xc1\xe8\xa9\x76\x6a\x87\xcb\x9c\x28\xc0\x54\x9a\x0d\x2c\xdf\xf2\xb1\x7a\x7c\xb3\xb5\xe2\xe6\x7b\x5f\xef\x0b\xa6\x4b\xf4\xbd\x1a\xd7\x06\xfa\x62\x4d\xaf\x99\x22\x44\xa6\xcb\xbe\x4f\x0e\xd5\x17\x07\xf8\xac\xbd\x33\x87\x99\x92\x39\xe6\x28\x98\x84\x52\xcc\x4f\x9e\x3f\x7d\x0a\xd8\x00\xbe\xa1\x09\xff\x9f\xb8\x05\x56\xaa\x70\x0a\x35\xd9\x0f\xfe\x13\x55\xf5\xbe\xb5\x4f\xa1\x2e\xce\x27\x43\x8a\xca\x08\x48\xc4\x1b\x58\xda\xb9\xb5\x9a\x8f\xe8\x46\x2e\xbe\xcd\x95\x4b\xb6\x3a\x1c\x05\xa6\xc3\xa8\x60\x3e\x36\x91\x4f\x5a\x11\xd5\x1f\xe1\x02\x44\x51\x03\x5b\x68\xe3\x75\x11\x06\xf6\xb1\x85\x57\x4a\xe6\x42\xf1\xf8\xc2\xf1\xf9\x57\x17\x4d\x8a\x9a\x06\x57\xb1\xd5\x74\xd1\x86\xb9\x74\xfc\xf8\x2b\x0b\x25\x77\x3e\x38\x89\x4e\x37\x1a\xb9\x4a\xf7\xc3\x2f\xbb\x0f\xee\x83\x74\x04\x65\x0b\x55\x62\xf3\x3b\x43\x44\x18\x3d\x3d\x7f\x41\x88\xf0\xc4\xf0\x9f\x67\x1b\x98\x3e\x3d\xcc\x13\xbc\x63\x00\xd4\xf6\x16\x39\x0e\x8b\xa8\xb4\xa4\xea\x38\xc1\xb0\x7b\xf7\x83\x47\xff\xf7\xfd\x64\xfc\xc6\x1f\xaa\x1f\x8e\xe1\x64\xc7\x25\x43\xce\xc0\x00\xec\x29\xc1\xfb\xed\xcc\x91\x7c\xfa\x56\x3d\x7e\xc0\xe7\x1b\x58\x17\x09\xcf\xec\xc3\xa2\x67\x72\xc8\x59\x9d\xf8\x58\x7f\x09\xd1\xf0\x8a\x04\xdf\xdd\x07\xdf\xed\x7f\x74\xd5\xa8\xec\xff\xfc\xd9\xc1\x2f\x37\xba\x57\xef\x77\x6f\xdd\x02\xd5\x33\xab\xf9\xdd\x87\x3b\x6a\xa7\x75\xe7\xf6\xde\xcd\x9d\xc2\x64\xfc\x27\x1c\xd2\xbf\x20\x93\x38\x0e\x60\x40\x87\x73\xf7\x09\x61\x8f\xab\x40\x5f\xe5\xd3\x9f\xdb\x19\x70\x34\x0d\x08\x0a\xac\xd7\x7d\xa6\x6f\x5a\x5f\xf2\x0c\x87\xbe\x6c\x05\x84\x62\x35\xf3\xe3\x38\x9d\xab\xec\x7d\xf6\x53\xf7\xdb\xaf\x0f\xb6\x77\x1e\xfd\x69\x7b\xc2\xdc\x57\xc9\xdd\x8d\xaf\x74\x00\x1b\xe4\xda\xed\xfe\x3d\x8c\x4e\x27\x17\xcb\x88\x4d\x22\x1d\x2f\xdf\x13\x4b\x17\x3b\x0e\x12\xfd\xab\x6a\xcb\x99\xa5\xc7\xe8\x7a\x20\xad\xd2\xcb\xf6\x64\xfd\xd1\x19\x50\xd4\xbb\x00\x95\x55\x34\x9a\x4f\xa6\x51\x94\xb9\x98\x93\x55\x36\x3e\xb8\x4d\xa3\x30\x7b\x6f\x24\xab\x71\xc2\x74\x79\xbc\x4a\x37\x5e\xf6\xff\x7e\x7f\x75\xf4\x16\x25\xd9\x98\xcc\x64\xb6\x28\xe9\x3c\x6e\x60\x79\x8a\x35\x44\x3a\x73\x67\x15\x1b\xf3\xd0\xd2\xdb\x9f\xb9\xfe\xa2\xb1\xb7\x14\xce\x6c\x66\x5e\xd6\x22\x63\x56\xca\x7a\x75\xa8\xba\x4e\x75\xcf\xe8\xb5\xf0\x0a\x95\x98\x37\x91\x9f\xef\x95\xcf\x81\x63\xe0\xdf\xc0\x82\x5e\xc8\x66\xad\xb4\x94\xc6\xca\x3f\x03\x00\x00\xff\xff\xe7\x19\xdd\x87\xbf\x30\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 12479, mode: os.FileMode(420), modTime: time.Unix(1602256587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
