// Code generated for package util by go-bindata DO NOT EDIT. (@generated)
// sources:
// static/pages/writing.html
package util

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticPagesWritingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5b\x6f\x1b\xc7\xf5\x7f\xd7\xa7\x38\xff\x81\x81\x48\x40\x76\x57\xa2\x14\x22\x7f\x85\x4b\x20\x36\xdd\x46\xa8\xe3\xb4\x56\x64\xf4\x4d\x18\xee\x1e\x72\xc7\x9a\x9d\x59\xcf\xcc\x92\x62\x09\x02\x6a\xd0\xb4\x45\x90\x00\x0e\x90\x02\x46\xea\xd4\x4d\xd1\x06\x45\xd1\xd4\x7d\x34\x8a\xa6\xfe\x30\x11\x7d\x79\xea\x57\x28\x66\x2f\xe4\xf2\xa2\x8b\x63\xb9\x49\xe3\x07\x73\x6e\xe7\x37\x73\xce\xef\xcc\x6f\x35\xa7\x11\x99\x98\x03\xa7\xa2\xeb\x13\x14\xa4\xb9\xb2\xd2\x88\x90\x86\xcd\x15\x80\x46\x8c\x86\x42\x10\x51\xa5\xd1\xf8\x24\x35\x1d\xe7\x75\x32\x9d\x88\x8c\x49\x1c\xbc\x9d\xb2\x9e\x4f\x7e\xea\xec\xbd\xe9\x5c\x91\x71\x42\x0d\x6b\x73\x24\x10\x48\x61\x50\x18\x9f\xec\x5c\xf5\x31\xec\x62\xc5\x4e\xd0\x18\x7d\xd2\x63\xd8\x4f\xa4\x32\x95\xa5\x7d\x16\x9a\xc8\x0f\xb1\xc7\x02\x74\xb2\xce\xab\xc0\x04\x33\x8c\x72\x47\x07\x94\xa3\xbf\xb1\x00\x43\x53\x13\x49\x55\x01\xb9\xc5\x8a\xbd\x0c\x33\x1c\x9b\xad\xd6\xf5\x5d\xe7\x87\xef\x34\xbc\xbc\x6b\x27\xfe\xcf\x71\xe0\xb2\x94\x46\x1b\x45\x13\xb8\xb2\xbb\x0b\x8e\x93\x4d\x70\x26\x0e\x40\x21\xf7\x89\x36\x03\x8e\x3a\x42\x34\x04\x22\x85\x1d\x9f\x78\xda\x50\xc3\x02\xaf\x5d\x1a\xba\x31\x13\x6e\xa0\x35\x39\xb7\x69\x20\xe3\x58\x96\x36\x0d\x2f\x8f\xf2\x4a\xa3\x2d\xc3\x41\x86\x61\x07\x50\xd9\x26\x40\x23\x64\x3d\x08\x38\xd5\xda\x27\x82\xf6\xda\x54\x41\xfe\xe3\x84\x54\x1d\x40\xbb\x9b\xff\xea\x88\x86\xb2\xef\xe8\x98\xe4\x66\xb3\x86\x36\x26\x94\x09\x54\x10\x3a\x1d\x8e\x87\x70\x2b\xd5\x86\x75\x06\x4e\x11\x2c\xa7\x8d\xa6\x8f\x19\xe9\x50\xfc\x6b\xd0\xf2\xd0\x64\x76\x7b\xa7\xad\xa8\x08\x4b\x20\xca\x59\x57\x38\xcc\x60\xac\x9d\x00\x85\x41\x55\xc1\x00\x68\xe8\x5e\x17\x0e\x63\x2e\xb4\x4f\x6c\x96\x6c\x7b\x5e\xbf\xdf\x77\xfb\x9b\xae\x54\x5d\xaf\xb6\xbe\xbe\xee\xe9\x5e\x97\x40\x4e\x38\xa9\xad\x13\x88\x90\x75\x23\x93\xb7\x3b\x8c\x73\x9f\x08\x29\x90\x80\x36\x4a\x1e\xa0\x4f\x82\x54\x29\x14\xe6\x8a\xe4\x52\x91\xca\x56\x50\xac\x70\x38\x13\x18\xd0\xc4\x27\x4a\xa6\x22\x24\xd5\xe1\x5b\x92\x89\xf9\xf1\x72\x6b\x02\x54\x31\xea\x44\x2c\x0c\x51\xf8\xc4\xa8\x14\x27\x9e\xc7\xca\xa9\xcd\xee\x65\x93\xf6\xb2\x3c\xf4\xc9\x3a\xac\x43\x6d\x0b\x6a\x5b\x04\x3a\x32\x48\x35\x6d\x73\xf4\x49\x87\x72\x8d\x33\x91\x00\x68\x24\xd4\x44\x10\xfa\xe4\xed\xda\x26\x6c\xfc\x3f\xad\x41\x0d\xac\xf5\x86\x53\x83\xda\x5b\x9b\xd5\xbe\x53\xbb\xf9\xfa\xb4\x0f\x35\xa7\x16\x6d\xf1\x9a\xb3\x19\xd5\x79\x0d\x36\xa3\xad\xea\x1c\xd4\x7e\x46\xc0\x9b\xdb\x2a\x60\x2a\xe0\x08\xc1\xa1\x4f\x36\x6a\x04\x82\x81\x4f\x36\x36\x09\x28\x9f\x6c\xd9\xc5\x0d\x1b\xf5\x59\x9e\x8c\x92\xa2\x3b\xbd\x24\x45\x7f\x9a\x0e\x1e\x9d\x24\x96\x17\xb2\x5e\x91\x9c\x65\x33\x4f\xe2\x3c\x67\xb3\x7b\x49\x99\x00\x25\x6d\x28\x6c\xd3\x06\x7b\x90\x77\x54\x97\x09\xc7\xc8\x64\x1b\x36\xd7\x93\x43\x32\x4d\xf2\xe5\x79\xcb\x9d\x38\x74\xea\x20\x3b\x1d\x8d\xc6\xb6\x37\xab\x39\xda\x91\x2a\x06\x1a\x18\x26\x85\xbd\x5d\xb4\x87\x04\x62\x34\x91\x0c\x7d\x92\x48\x6d\xac\x88\x55\x9c\x6c\xa7\xc6\x48\x01\x66\x90\xa0\x4f\x74\xda\x8e\x99\x99\x50\xdc\x36\x02\xda\x46\x38\x89\x62\x31\x55\x83\xf9\x13\xb7\xa5\x31\x32\xde\x86\xda\x7a\x72\xf8\x06\x69\xee\xd2\x1e\x36\xbc\x1c\x6f\x76\x8f\xca\xe9\xad\xa8\x71\x34\xf3\x69\x10\xbd\x36\xb7\x60\x7f\xdf\x06\x8f\x34\x5b\xd7\x77\x1f\xdf\xfb\x68\xfc\xc1\xe7\xe3\xdf\xfc\xb2\xe1\x45\xaf\xcd\xd9\x2d\x22\xef\xef\x5b\xc9\x98\xc3\x9f\x5d\x69\x23\xe4\x74\x95\x4c\x93\x85\x65\x4b\x16\x06\x11\x06\x07\x30\x6d\x3a\x4c\xd8\x6b\xb3\xc4\x14\xa0\xc1\x44\x92\x9a\x45\x73\x27\x1b\x27\x45\x94\x15\x0d\x99\x24\x85\x44\xb7\x84\xbe\x4e\x63\x24\xc0\x42\x9f\x50\xce\x42\xa1\x09\xf4\x28\x4f\x71\xda\x95\x22\xe0\x2c\x38\x28\x07\xae\x58\x48\x0c\x7f\x90\x8a\xd5\x35\x02\xc3\x21\xeb\x00\xde\x86\x4b\x6e\xeb\xfa\xae\x6b\xb1\xa0\x34\x1c\x8d\x82\x7c\xe9\x70\x88\x22\x1c\x8d\x96\x1e\x99\xd3\x36\xf2\x25\x47\xce\xc6\xed\x05\x56\x93\x83\x2c\xb3\x07\x78\x33\x9b\x5c\x7d\x76\xf7\xd1\xb3\x5f\x7d\x78\xfc\x8f\x8f\xd7\x96\xed\xe2\x65\x70\x4b\xc2\xed\x55\xd2\xfc\x3b\xc2\x42\x28\x74\x22\xc3\x09\x0b\x65\x77\xc2\x42\x3e\x70\x36\x0b\x85\xe1\x85\xb1\x50\xe0\x2d\x67\xa1\x95\x4d\xae\x3e\x7d\xff\x5f\x4f\xff\xf6\xe0\xfb\xc0\x42\xc0\x65\x1a\x76\x38\x55\x38\x61\xa2\x3a\x34\x61\x63\x3a\x78\x36\x23\x15\x80\x0b\x63\xa5\x82\xb9\x9c\x99\x2b\x93\x05\x17\x41\x89\x8e\x29\xe7\x65\x9a\xee\x47\xc8\x13\x32\x73\x40\x83\x87\x06\xec\x7f\x4e\x9c\x1a\x0c\x89\xfd\xae\x59\x93\x05\x41\x5c\x86\x7f\x7e\x95\xcc\x23\x93\x05\xa0\x25\xf4\x4e\x6b\x72\x73\x76\xc2\x6b\x59\x70\x9a\x3b\xad\x93\x7d\x5b\x92\x1a\x52\x18\x25\x79\x25\x13\x4a\xcc\xa2\x59\xa4\xc0\x70\x98\xd1\xb9\xd3\x1a\x8d\x16\x35\x7e\xc1\xa5\x0b\x72\x6f\x17\x03\x85\x86\x4c\x3c\x2c\xfa\xcd\xfc\xf7\xc5\xdc\x2c\xb0\x4a\x57\xcb\xee\xac\xbb\xf9\xe8\xc9\x2e\xaf\x9c\x1a\x86\xc5\x45\x2f\xf2\x45\xde\xf9\xf1\xcd\xad\x17\xf9\x12\xc3\xf3\xf2\x53\xd1\x9b\x65\x54\xe5\x41\xce\xd5\x24\x5b\xd4\x96\x87\xe4\x64\xd9\xb1\x71\x66\x49\x6f\x6b\x1f\x05\xcd\xde\x62\x39\x13\x3b\x49\x6f\xeb\x6a\x31\x32\x55\x0e\x3b\xea\xe6\xc3\x60\xff\xf8\x3d\x5b\x34\xce\x25\x19\xd5\xfd\x9b\x8f\xef\x3e\x18\xdf\xf9\x62\x7c\xe7\xc1\x93\x4f\xfe\x7c\x42\x2a\x2d\x63\xf9\x1b\x66\x73\xb6\x75\xaa\x38\x69\x3e\xbe\xff\xa7\xa7\x0f\xfe\xb0\x77\xe3\xda\x59\xf9\x9b\x87\xd6\xda\x9c\x96\xca\x36\x54\x7b\x76\xcd\x24\xc0\x99\x45\xf6\x7e\x08\x51\x07\x8a\xb5\x31\x6c\x0f\xa6\x73\x85\x76\x4d\x13\x3d\x0b\xf6\xde\x8d\x6b\x4b\xd2\x7c\x46\xf7\xe6\x00\x4e\x15\xbf\xc7\x5f\xfe\x71\xef\xc6\xb5\x67\xf7\x8e\x9e\x3e\xfa\x64\xfc\xdb\xdf\x1d\x7f\xf5\xfb\x27\x9f\xfe\x62\xfc\xfe\x5f\x9f\x7c\xf5\xb1\xcd\xe3\xf1\xbd\xbf\x8f\x3f\x3b\xfa\xfa\xe8\xbd\xf1\x17\xef\xfd\xfb\x9f\x9f\xda\xd7\x98\xde\xf6\x3c\x9a\x30\xc7\xee\xe2\xb2\xc4\xd5\x6d\x8f\x25\x5f\x1f\xfd\xbc\x78\xa9\x75\x51\xb2\xc4\x15\x98\xba\x18\xa6\x6e\x20\x4e\x57\xd7\x0b\x63\x2c\x94\xf6\xc9\xa0\x49\xb3\x95\x37\x4e\xe6\xcc\x7a\x4f\x15\xd2\xe5\x5c\x4d\xe2\x57\x02\x56\xd8\x6b\x95\x43\x4a\xf6\xb5\x4f\x36\x4f\x24\xaf\xb0\xcd\xe3\xdf\x5c\x19\x0e\x1d\x50\x54\x74\x11\x2e\xb1\x57\xe1\x52\x0f\xb6\x7d\xc8\xc9\x2c\x10\x47\xa3\x95\xe1\xf0\x52\x2f\xfb\x71\x00\x45\x08\xce\x68\xb4\xe4\x83\x57\x1e\xfd\x6c\xf6\x67\x4e\x70\x7a\x06\x1c\x3f\x3c\x7a\xfa\xf9\x87\xc7\x0f\x8f\x8e\x1f\xfe\x65\x7c\xff\xfe\xf8\xce\x47\xcf\x41\xd9\xcb\x97\xd2\xfa\xff\xbe\x94\xd6\x17\xa5\xb4\xbe\x54\x4a\xeb\x2f\x47\x4a\xeb\xdf\x9e\x94\xd6\x2f\x58\x4a\x27\x11\xcd\x96\x4c\xc3\xb9\x77\xa2\x94\xd6\x17\xa5\x74\x4e\xc5\xea\x13\x15\x3b\x53\x56\xeb\x17\x23\xab\xf5\xd3\x65\xb5\x7e\x9a\xac\xd6\xff\x9b\xba\x5a\xbf\x68\x5d\xad\x2f\xd1\xd5\xfa\x39\x75\xb5\x7e\x5e\x5d\xad\xbf\x2c\x5d\xad\x7f\xa7\x74\xf5\x79\x0a\x53\x27\xd5\x9e\x1a\x9e\x3d\xfc\xe9\x45\x3a\xeb\x71\x66\xd2\xb0\x7c\x24\x26\x5f\xd0\x49\x45\x56\x42\x83\x2e\x9a\x9f\xa4\xa8\x06\x37\x2d\x69\x6d\x8e\xab\x6b\xc3\x02\xae\x47\x15\xdc\xb6\x53\xe0\x43\x9f\x89\x50\xf6\x5d\x2e\x03\x6a\xad\x5c\x8d\x54\x05\x91\xab\xd3\xb6\x36\x8a\x89\xee\xea\xc6\xda\x1b\x85\x19\xeb\xc0\x6a\x61\xe6\xfb\x40\x34\xed\xe1\x3b\x07\x7e\x56\x5a\x5d\x83\xe1\xe4\xe8\xf3\x88\x91\xc2\x0e\xf8\x40\xbc\x69\xcd\x95\x72\x54\x66\x95\x1c\x3f\xfa\x6c\xfc\xe5\xdd\xc7\xbf\xbe\x33\xfe\xe0\x3e\x29\x9f\xfd\x79\x1e\xe4\xff\x2f\xba\xb0\x52\x9e\xbf\x8d\x1d\xa9\x30\x7b\x62\xf9\x84\xac\xcc\xba\xbe\x58\x6d\x9a\x9c\x2f\x94\x41\x1a\xa3\x30\x6e\x17\xcd\x55\x8e\xb6\x79\x79\xb0\x13\xae\x16\xaf\xb5\x35\x37\x64\x59\xd5\x37\xf4\x21\x2b\xfb\x56\x7c\xaf\x6c\x39\xad\x51\x9c\x89\x97\x6b\x5b\xf5\xbc\x2b\x67\x1d\xa5\xf2\x18\x5d\x73\x99\x10\xa8\xde\x7a\xf7\xed\x6b\x36\x86\x6f\x06\x01\x6a\xfd\x23\x1c\xc0\x4e\x8b\x9c\x0b\xa6\x78\x96\x9d\x88\x53\xcc\x9f\x03\x2b\xbf\x5b\x73\x40\xa5\x42\x2a\x1a\xbb\x81\x14\x5a\x72\x74\x29\x67\x83\x54\xb8\x81\x8c\xbd\x98\x0a\xda\x45\x8f\x1e\x90\x82\xd5\x59\x9e\x16\xeb\x51\xdf\x13\x9e\x5e\x8c\x9d\x77\xe5\x01\x8a\x17\xa6\xa4\xa4\x23\x0f\xb2\x1b\x08\x8f\x06\x81\x4c\x85\xf1\xcc\x14\x7f\x9e\x91\xe5\x35\xa9\xb3\x59\x39\x39\x14\x4e\xe9\x48\x25\xb2\xe0\x9f\x93\x8f\xe7\x4f\x06\x2b\x47\xe7\xb5\x2a\x28\x27\xdf\x3e\x57\x21\xd5\x91\x3b\x8d\x7d\x76\x77\x12\x25\x3b\x8c\x63\xf6\xc7\x47\xc6\x98\x9e\xa1\xcc\x8a\x60\x98\x97\x1d\xc1\x87\x57\x86\xc3\x69\xb9\x70\x34\x7a\x25\x5f\xa3\xfb\xcc\x04\xd1\x6a\xb1\x6c\xa2\xff\x01\xd5\xd3\x52\xfb\x76\x45\xba\x17\x75\x73\x32\xd5\x56\x48\x0f\xde\x98\xd1\xe8\x12\xa8\xa8\xee\x56\x81\x16\x2f\xf6\x79\x80\x2a\x05\xc9\x2a\xd8\xf2\x9c\x3c\x1d\x30\xc4\x0e\x4d\xb9\xf9\xe6\xce\x8d\xb2\x4f\x6c\xf9\x61\x5d\x69\x78\x91\x89\x79\xf3\x3f\x01\x00\x00\xff\xff\x0d\x43\x97\x26\x56\x1f\x00\x00")

func staticPagesWritingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticPagesWritingHtml,
		"static/pages/writing.html",
	)
}

func staticPagesWritingHtml() (*asset, error) {
	bytes, err := staticPagesWritingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/pages/writing.html", size: 8022, mode: os.FileMode(420), modTime: time.Unix(1599012149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/pages/writing.html": staticPagesWritingHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"pages": &bintree{nil, map[string]*bintree{
			"writing.html": &bintree{staticPagesWritingHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
